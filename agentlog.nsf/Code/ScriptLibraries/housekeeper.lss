'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Declare
Use "cls.log.6"
Use "cls.system"
Use "app.log"

%REM
Rev 6.10 majkilde 3.02.2010
- Fixed some errors when deleting documents / adjusting the max count
Rev 6.8.7 majkilde 14.01.2010
- Fixed a problem with the date search on some servers
- Fixed the deleted counter
Rev 6.7 majkilde 22.10.09
- Run on every server
Rev 6.4 majkilde 8.09.09
- Update from profiles
Rev 6.3 majkilde 2.8.09
- Fixed the log messages
Rev 6.1.1 majkilde 10.6.09
- Also deletes old agent documents
Rev 6.0.2
- AutoRefresh = false
Rev 5.2
- Optimized cleaner algorithme
%END REM

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Function runCleanup()

'++LotusScript Development Environment:2:5:(Declarations):0:2

'++LotusScript Development Environment:2:1:runCleanup:1:8
Function runCleanup()
	Const MAX = 21
	
	Dim session As New NotesSession
	Dim db As NotesDatabase
	Dim profile As NotesDocument
	Dim coll As NotesDocumentCollection
	Dim doc As NotesDocument
	Dim nextDoc As NotesDocument
	Dim cnt As Long
	Dim total As Long
	
	'init the agent log
	
	Set db = session.CurrentDatabase
	Dim l As New AgentLog( db )
	Call SystemLog.set( l )
	
	Dim debug As Boolean
	debug = Not session.Isonserver
	
	If Not debug Then On Error GoTo eh
	
	Dim server As New NotesName( db.server )
	
	'<update> agent documents
	Dim p As New ProfileHandler()
	Dim view As NotesView
	Set view = db.GetView( "lookupAgentsByActiveServer" )
	Set coll = view.Getalldocumentsbykey( LCase( server.abbreviated ), True )
	
	Set doc = coll.GetFirstDocument
	Do Until doc Is Nothing
		Call p.loadDoc( doc )
		If p.readProfile() Then cnt = cnt+1.
		Set doc = coll.GetNextDocument( doc )
	Loop
	Call l.logAction( LOG_NORMAL, parseParam( "%1 agent documents updated with new settings", cnt ), Nothing )
	cnt = 0
	'</update>
	
	Set profile = db.GetProfileDocument( "Setup" )
	If Cstr( profile.months( 0 )) = "" Then 'new profile - please set defaults
		profile.months = 3
		profile.counts = MAX
		Call profile.Save( True, False )
	End If
	
	Dim dt As New NotesDateTime( "" )
	Dim qry As String
	
	total = 0
	
	
	'delete logs by date
	Call dt.SetNow
	Call dt.AdjustMonth( -profile.getItemValue( "months" )( 0 ))
	
	qry = |form="Log":"Log Entry" & @modified < [| & dt.dateonly & |]|
	Set coll = db.Search( qry, Nothing, 0 )
	Call l.logAction( LOG_NORMAL, parseParams( "%1 log entries has been deleted by date (%2)", coll.Count, qry, "", "" ), Nothing )
	Call coll.RemoveAll( True )
	total = total + coll.Count
	
	'delete agents by date
	qry = |form="Agent" & @modified < [| & dt.dateonly & |]|
	Set coll = db.Search( qry, Nothing, 0 )
	Call l.logAction( LOG_NORMAL, parseParams( "%1 agent documents has been deleted by date (%2)", coll.Count, qry, "", "" ), Nothing )
	Call coll.RemoveAll( True )
	total = total + coll.Count
	
	'delete by count
	Dim viewNav As NotesViewNavigator
	Dim entry As NotesViewEntry
	Dim categories As Variant
	'Dim max As Integer
	'max = profile.counts( 0 )
	
	Set view = db.GetView( "cleanup" )
	Call view.Refresh()
	view.AutoUpdate = False
	categories = Evaluate( |@dbcolumn( ""; @dbname; "cleanup"; 1 )| )
	If Isarray( categories ) Then
		Call l.logAction( LOG_NORMAL, parseParam( "Found %1 categories", Ubound( categories )+1 ), Nothing )
		Forall category In categories
			Set viewNav = view.CreateViewNavFromCategory( category )
			Call l.logAction( LOG_DEBUG, parseParams( "Category: %1 has %2 entries", category, viewNav.Count, "", "" ), Nothing )
			cnt = 0
			
			If viewNav.Count > max Then
				Dim idx As Integer
				For idx = MAX To viewNav.Count
					Set entry = viewnav.Getnth(idx)
					If Not entry.Isvalid Then GoTo nextentry
					If Not entry.Isdocument Then GoTo nextentry
					Set doc = entry.Document
					If doc Is Nothing Then GoTo nextentry
					If doc.Isdeleted Then GoTo nextentry
					Call doc.Remove(true)
					cnt = cnt+1
nextentry:
				Next	
				Call l.logAction( LOG_NORMAL, parseParams( "Deleted %1 documents from %2", cnt, category, "", "" ), Nothing )

				total = total+cnt
			End If
NEXTCATEGORY:
		End Forall
	End If
	view.AutoUpdate = True
	
	'close the agent log
	Call l.logAction( LOG_NORMAL, parseParam( "%1 documents deleted", total ), Nothing )
	Call l.close()
	
	Exit Function
eh:
	Call l.logaction( LOG_FATAL, getErrorInfo( "" ), Nothing )
	Resume next
End Function