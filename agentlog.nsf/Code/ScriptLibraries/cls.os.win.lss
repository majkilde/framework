'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Declare


%REM
**************************************************************************************************************************'
COPYRIGHT 2003-2006 by MAJKILDE Aps
**************************************************************************************************************************'
This library is programmed and owned by MAJKILDE Aps
Under the copyright laws, neither the documentation nor the software may be copied, photocopied, 
reproduced, translated, resold, or reduced to any electronic medium or machine-readable form, 
in whole or in part, without the prior written consent of MAJKILDE Aps, except in the manner described 
in the documentation or the applicable licensing agreement governing the use of the software.
**************************************************************************************************************************'
%ENDREM

%REM
Rev 6.0 majkilde 7.02.2010
- Filehandle.getFiles now supports a multivalue query
Rev 5.9 majkilde 18.01.2010
- WinFiles, new method: giveFocus
Rev 5.8.0 badens√∏ 30.03.10
- Clipboard.getText: Make sure to call closeClipboard when getText fails.	
- Clipboard.getText: Changed ErrorText when err occurs 

Rev 5.7.9 majkilde 11.09.09
- ShellExecute: move the launched application to the foreground (give focus)
Rev 5.7.6 majkilde 25.8.09
- Removed the reference to cls.system due to a bug in the 8.5.1 (compilation failed)
Rev 5.5.
- Added File dialogs, copied from the APICalls script lib in bookmark.nsf
1.1 Function LastDllErrorInfo added
%END REM


'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Public Class RegistryEntry
Declare Public Class WinFiles
Declare Public Class FileHandler
Declare Class MiniArray
Declare Public Class Clipboard
Declare Function GetDirDlg() As String
Declare Public Function LastDllErrorInfo(Byval ErrN As Integer) As String   
Declare Function OpenFileDlg ()

'++LotusScript Development Environment:2:5:(Declarations):0:10
'cls.os.win: 




'FormatMessage
Declare Function FormatMessage Lib "kernel32" Alias "FormatMessageA" (Byval dwFlags As Integer, lpSource As Integer, Byval dwMessageId As Integer, Byval dwLanguageId As Integer, Byval lpBuffer As String, Byval nSize As Integer, Arguments As Integer) As Integer

'Declare Function FormatMessage Lib "kernel32" (Byval dwFlags As Integer, lpSource As Integer, Byval dwMessageId As Integer, Byval dwLanguageId As Long, Byval lpBuffer As String, Byval nSize As Integer,  Arguments As Integer) As Integer

Public FormatMessageFlags As Integer    
Const FORMAT_MESSAGE_ALLOCATE_BUFFER = &H100    
Const FORMAT_MESSAGE_ARGUMENT_ARRAY = &H2000
Const FORMAT_MESSAGE_FROM_HMODULE = &H800
Const FORMAT_MESSAGE_FROM_STRING = &H400
Const FORMAT_MESSAGE_FROM_SYSTEM = &H1000
Const FORMAT_MESSAGE_IGNORE_INSERTS = &H200
Const Zero = 0
Const FORMAT_MESSAGE_MAX_WIDTH_MASK = &HFF


Public Languages As Byte
Const LANG_NEUTRAL = &H0   
Const  SUBLANG_DEFAULT = &H1




'##################################################################### 
'ClassRegistry 
'##################################################################### 
' 
'// API Constants 
Const REG_SZ = 1 
Const REG_DWORD = 4 

Const HKEY_CLASSES_ROOT = &H80000000 
Const HKEY_CURRENT_USER = &H80000001 
Const HKEY_LOCAL_MACHINE = &H80000002 
Const HKEY_USERS = &H80000003 

Const ERROR_NONE = 0 
Const ERROR_BADDB = 1 
Const ERROR_BADKEY = 2 
Const ERROR_CANTOPEN = 3 
Const ERROR_CANTREAD = 4 
Const ERROR_CANTWRITE = 5 
Const ERROR_OUTOFMEMORY = 6 
Const ERROR_INVALID_PARAMETER = 7 
Const ERROR_ACCESS_DENIED = 8 
Const ERROR_INVALID_PARAMETERS = 87 
Const ERROR_NO_MORE_ITEMS = 259 

Const KEY_ALL_ACCESS = &H3F 
Const REG_OPTION_NON_VOLATILE = 0 
Const REG_PARAMETER_IS_RESERVED = 0 
Const REG_DEFAULT_VALUE = "" 

Const cMAXLEN_BUFFER = 255 

'// API Declarations 
Declare Function RegCloseKey Lib "advapi32.dll" (Byval hKey As Long) As Long 
Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (Byval hKey As Long, Byval lpSubKey As String, Byval ulOptions As Long, Byval samDesired As Long, phkResult As Long) As Long 
Declare Function RegQueryValueExString Lib "advapi32.dll" Alias "RegQueryValueExA" (Byval hKey As Long, Byval lpValueName As String, Byval lpReserved As Long, lpType As Long, Byval lpData As String, lpcbData As Long) As Long 
Declare Function RegQueryValueExLong Lib "advapi32.dll" Alias "RegQueryValueExA" (Byval hKey As Long, Byval lpValueName As String, Byval lpReserved As Long, lpType As Long, lpData As Long, lpcbData As Long) As Long 
Declare Function RegQueryValueExNULL Lib "advapi32.dll" Alias "RegQueryValueExA" (Byval hKey As Long, Byval lpValueName As String, Byval lpReserved As Long, lpType As Long, Byval lpData As Long, lpcbData As Long) As Long 
Declare Function RegSetValueExString Lib "advapi32.dll" Alias "RegSetValueExA" (Byval hKey As Long, Byval lpValueName As String, Byval Reserved As Long, Byval dwType As Long, Byval lpValue As String, Byval cbData As Long) As Long 
Declare Function RegSetValueExLong Lib "advapi32.dll" Alias "RegSetValueExA" (Byval hKey As Long, Byval lpValueName As String, Byval Reserved As Long, Byval dwType As Long, lpValue As Long, Byval cbData As Long) As Long 



Private Const WIN_INI_BUFSIZE = 255


Declare Function GetPrivateProfileString Lib "kernel32.dll" Alias "GetPrivateProfileStringA" (Byval lpAppName As String, Byval lpKeyName As String, Byval lpDefault As String, Byval lpReturnedString As String, Byval nSize As Long, Byval lpFileName As String) As Long 
Declare Function WritePrivateProfileString Lib "kernel32.dll" Alias "WritePrivateProfileStringA" (Byval lpAppName As String, Byval lpKeyName As String, Byval lpString As String, Byval lpFileName As String) As Long 

'##################################################################### 
'WIN FILES
'##################################################################### 
' 


'********** ShellExecute constants
Public Const SW_SHOWDEFAULT = 10
Public Const SW_SHOWMAXIMIZED = 3
Public Const SW_SHOWMINIMIZED = 2
Public Const SW_SHOWNORMAL = 1

'********** GetTempPath Declaration 
Declare Function winGetTempPath Lib "kernel32" Alias "GetTempPathA" (Byval nBufferLength As Long, Byval lpBuffer As String) As Long

'********* ShellExecute Declarations
Declare Function winShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (Byval hwnd As Long, Byval lpOperation As String, Byval lpFile As String, Byval lpParameters As String, Byval lpDirectory As String, Byval nShowCmd As Long) As Long'WinFiles'FileHandler


''********* Control window status
Declare Function GetActiveWindow Lib "user32" Alias "GetActiveWindow" () As Long 
Declare Function GetForegroundWindow Lib "user32" () As Long 
Declare Function SetForegroundWindow Lib "user32" (Byval hwnd As Long) As Long 
Declare Function GetDesktopWindow Lib "user32" () As Long 


'##################################################################### 
'CLIPBOARD
'##################################################################### 
' 

'Clipboard functions
Declare Function OpenClipboard Lib "User32" (Byval hwnd As Long) As Long
Declare Function CloseClipboard Lib "User32" () As Long
Declare Function GetClipboardData Lib "User32" (Byval wFormat As Long) As Long
Declare Function EmptyClipboard Lib "user32" Alias "EmptyClipboard" () As Long
Declare Function SetClipboardData Lib "user32" Alias "SetClipboardData" (Byval wFormat As Long, Byval hMem As Long) As Long
Declare Function IsClipboardFormatAvailable Lib "user32" Alias "IsClipboardFormatAvailable" (Byval wFormat As Long) As Long

Private Const CF_TEXT = 1

'Mem (Allocate mem to new clipboard string)
Declare Function GlobalLock Lib "kernel32" (Byval hMem As Long) As Long
Declare Function GlobalUnlock Lib "kernel32" (Byval hMem As Long) As Long
Declare Function GlobalAlloc Lib "kernel32" Alias "GlobalAlloc" (Byval wFlags As Long, Byval dwBytes As Long) As Long
Declare Function GlobalSize Lib "kernel32" Alias "GlobalSize" (Byval hMem As Long) As Long

Private Const GMEM_MOVEABLE = &H40
Private Const GMEM_ZEROINIT = 2

'String copy (Convert Script string to C++ \0 terminated string pointer or vice versa)
Declare Function lstrcpy Lib "kernel32" Alias "lstrcpyA" (Byval lpString1 As String, Byval lpString2 As String) As Long      'Default/Original (not used here)
Declare Function lstrcpyA Lib "kernel32" Alias "lstrcpyA" (Byval lpString1 As String, Byval lpString2 As Long) As Long     'Modified params - from a string to mem
Declare Function lstrcpyB Lib "kernel32" Alias "lstrcpyA" (Byval lpString1 As Long, Byval lpString2 As String) As Long     'Modified params - from mem to a string

'Error msg
Private Const ERROR_BASE = 5300

Private Const ERROR_CB_BUSY = "Cannot open Clipboard. Another application may have it open"
Private Const ERROR_MEM_ALLOC = "Could not allocate memory."
Private Const ERROR_MEM_LOCK = "Could not lock memory to copy string from."'clipboard


'#####################################################################################################
'LOCAL BROWSE
'#####################################################################################################
'APICalls: 

Private Const BIF_RETURNONLYFSDIRS = 1
Private Const BIF_DONTGOBELOWDOMAIN = 2
Private Const BIF_NEWDIALOGSTYLE = &H40 'added by majkilde
Private Const MAX_PATH = 260

Public Const OFN_ALLOWMULTISELECT = &H200
Public Const OFN_CREATEPROMPT = &H2000
Public Const OFN_ENABLEHOOK = &H20
Public Const OFN_ENABLETEMPLATE = &H40
Public Const OFN_ENABLETEMPLATEHANDLE = &H80
Public Const OFN_EXPLORER = &H80000                         
Public Const OFN_EXTENSIONDIFFERENT = &H400
Public Const OFN_FILEMUSTEXIST = &H1000
Public Const OFN_HIDEREADONLY = &H4
Public Const OFN_LONGNAMES = &H200000                       
Public Const OFN_NOCHANGEDIR = &H8
Public Const OFN_NODEREFERENCELINKS = &H100000
Public Const OFN_NOLONGNAMES = &H40000                      
Public Const OFN_NONETWORKBUTTON = &H20000
Public Const OFN_NOREADONLYRETURN = &H8000
Public Const OFN_NOTESTFILECREATE = &H10000
Public Const OFN_NOVALIDATE = &H100
Public Const OFN_OVERWRITEPROMPT = &H2
Public Const OFN_PATHMUSTEXIST = &H800
Public Const OFN_READONLY = &H1
Public Const OFN_SHAREAWARE = &H4000
Public Const OFN_SHAREFALLTHROUGH = 2
Public Const OFN_SHARENOWARN = 1
Public Const OFN_SHAREWARN = 0
Public Const OFN_SHOWHELP = &H10

Dim Filter As String
Dim FileName As String
Dim FileTitle As String
Dim TruncName As String
Dim VaultWIPRoot As String
Dim VaultWIPUserPath As String

Type tagOPENFILENAME
	lStructSize As Long
	hwndOwner As Long
	hInstance As Long
	lpstrFilter As String
	lpstrCustomFilter As Long
	nMaxCustFilter As Long
	nFilterIndex As Long
	lpstrFile As String
	nMaxFile As Long
	lpstrFileTitle As String
	nMaxFileTitle As Long
	lpstrInitialDir As String
	lpstrTitle As String
	Flags As Long
	nFileOffset As Integer
	nFileExtension As Integer
	lpstrDefExt As String
	lCustData As Long
	lpfnHook As Long
	lpTemplateName As Long     
End Type

Type BrowseInfo
	hwndOwner      As Long
	pIDLRoot       As Long
	pszDisplayName As Long
	'lpszTitle      As Long
	lpszTitle      As String
	ulFlags        As Long
	lpfnCallback   As Long
	lParam         As Long
	iImage         As Long
End Type

Declare Function SHBrowseForFolder Lib "shell32" (lpbi As BrowseInfo) As Long

Declare Function SHGetPathFromIDList Lib "shell32" (Byval pidList As Long, Byval lpBuffer As String) As Long

Declare Function GetOpenFileName Lib "comdlg32.dll" Alias "GetOpenFileNameA" (OPENFILENAME As tagOPENFILENAME)  As Long

Dim OPENFILENAME As tagOPENFILENAME


'//CLASS 
Public Class RegistryEntry
	
'// Declare Member Varaibles 
	Private hkey As Long 
	
'// Declare Member Code 
Declare Public Function getValue( itemName As String ) As String 
Declare Public Function setValue( valueName As String, iType As Long, vValue As Variant) As Long 
	
'// Constructor 
	Public Sub new( section As Long, keyName As String )
		Dim rc As Long
		rc = RegOpenKeyEx(section, keyName, REG_PARAMETER_IS_RESERVED, KEY_ALL_ACCESS, Me.hKey) 
		Print LastDllErrorInfo( rc )
	End Sub 
	
'// Destructor 
	Public Sub delete() 
		Call RegCloseKey (Me.hKey) 
	End Sub 
	
	Public Function getValue( itemName As String ) As String 
		Dim sData As String 
		Dim lpcbData As Long 
		Dim lpType As Long 
		
'// First we initialize the buffer 
		sData = String(cMAXLEN_BUFFER, 0) 
		lpcbData = Len(sData) 
		
'// Get it 
		Dim rc As Long
		rc = RegQueryValueExString( Me.hKey, itemName, REG_PARAMETER_IS_RESERVED, lpType, sData, lpcbData) 
		Print LastDllErrorInfo( rc )
'// Return 
		getValue = Left( sData, Instr( 1, sData, Chr$(0) )-1) 
	End Function 
	
	Public Function setValue( valueName As String, iType As Long, vValue As Variant) As Long 
		Dim iValue As Long 
		Dim sValue As String 
		
		Select Case iType 
		Case REG_SZ 
			
'//sValue gets assigned the value vValue 
			sValue = vValue 
			
'// Set value to Windows registry using a string type 
			setValue = RegSetValueExString( Me.hKey, valueName, 0&, iType, sValue, Len(sValue)) 
			Print LastDllErrorInfo( setValue )
		Case REG_DWORD 
			
'// IVlale gets assigned the value in vValue 
			iValue = vValue 
			
'// Set value to Windows registy using a Long variable type 
			setValue = RegSetValueExLong( Me.hKey, valueName, 0&, iType, iValue, 4) 
			Print LastDllErrorInfo( setValue )
		End Select 
	End Function 
	
End Class


Public Class WinFiles
	Private hDesktop As Long
	
	Sub new()
		hDesktop = 0 
	End Sub

	Public Function getTempPath() As String
		Dim lpBuffer As String * 1024
		Dim nBufferLength As Long
		Dim ret As Long
		
		nBufferLength = Len( lpBuffer )
		ret = winGetTempPath( nBufferLength, lpBuffer )
		If ret Then
			GetTempPath = Left$( lpBuffer, ret )
			If Not Right$( GetTempPath, 1 ) = "\" Then
				GetTempPath = GetTempPath & "\"
			End If
		Else
			GetTempPath = "C:\"
		End If
	End Function 'getTempPath
	
	'http://msdn.microsoft.com/en-us/library/windows/desktop/bb762153(v=vs.85).aspx
	Public Function shellExecute( filename As String, action As String, show_mode As Long ) As Long
	'action: 'open' or 'new'
		hDesktop = GetDesktopWindow() 
		shellExecute = winShellExecute ( hDesktop, action, filename,"", "", show_mode ) 
		Call SetForegroundWindow( hDesktop ) 
	End Function 'shellExecute
	
	Function giveFocus()
		If hDesktop <> 0 then
			Call SetForegroundWindow( hDesktop )
		End if
	End function
	
End Class 


'##################################################################### 
'FILE HANDLER
'##################################################################### 
' 

'###########################################################################################
Public Class FileHandler
	Sub new()
		
	End Sub 'new 

	%REM
		query: *.* to return all files. multiple queries can be seperated by a comma, e.g. "*.doc,*.xls"
	%END REM	
	Public Function getFiles( startDir As String, query As String, doSubDirs As Integer ) As Variant
		'Dim path As String
		'Dim prefix As String
		Dim a As New MiniArray()
		
		Dim dirs As Variant
		If doSubDirs Then
			dirs = getDirectories( startDir )
			Forall subdir In dirs
			'recurse getFiles on alle subdirs
				If Cstr( subdir ) <> "" Then
					Call a.join( getFiles( Cstr( subdir ), query, True ))
				End If
			End Forall
		End If
		
		Dim queries As Variant
		Dim filename As String
		queries = Split( query, "," )
		
		If Right( startDir, 1 ) <> "\" Then
			startDir = startDir & "\"
		End If
		
		'Public Const ATTR_NORMAL = 0
		filename = Dir$( startDir & "*.*", 0 ) 'loop on all files
		Do While filename <> ""
			ForAll q In queries
				If LCase( filename ) Like LCase( q ) Then
					Call a.add( startDir & filename )
					GoTo nextfile		
				End If 
			End ForAll
			
nextfile:
			filename = Dir$
		Loop
		
		Call a.trim()
		getFiles = a.elements()
	End Function 'getFiles
	
	Public Function getDirectories( startDir As String ) As Variant
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		Dim path As String
		Dim prefix As String
		Dim a As New MiniArray( )
		
		prefix = startDir & "\"
		'Public Const ATTR_DIRECTORY = 16
		path = Dir$( prefix & "*.*", 16 )
		Do While path <> ""
			If Getfileattr( prefix & path ) =  16 Then
				If path <> "." And path <> ".." Then
					Call a.add( prefix & path )
				End If
			End If
			path = Dir$
		Loop
		
		Call a.trim()
		getDirectories = a.elements()
	End Function 'getDirectories
	
End Class 
%REM
	Class MiniArray
	Description: Comments for Class
%END REM
Class MiniArray
	Private values() As String
	Private cnt As Integer
%REM
		Sub New
		Description: Comments for Sub
%END REM
	Sub New()
		Redim values( 0 )
	End Sub
	
	Function Join( v As Variant )
		If Isarray( v ) Then
			Forall entry In v
				Call add( Cstr( entry ))
			End Forall
		Else
			add( Cstr( v ))
		End If
	End Function
	
%REM
		Function add
		Description: Comments for Function
%END REM
	Function add( s As String )
		If s = "" Then Exit Function 'auto trim
		If Not Isnull( Arraygetindex( values, s )) Then Exit Function 'auto unique
		
		Redim Preserve values( cnt )
		values( cnt ) = s 
		cnt = cnt+1
	End Function
	
	Function Trim() As Variant
		Me.trim = values
	End Function
	
%REM
		Function elements
		Description: Comments for Function
%END REM
	Function elements() As Variant
		elements = values
	End Function
End Class


'#############################################################
Public Class Clipboard
'#############################################################
	
	Public Sub Clear()
	'----------------------------------------------------------------------------------------------------------------------- Clear
		Dim ret As Long
		
		If OpenClipboard( 0 ) Then
			ret = EmptyClipboard()
			ret = CloseClipboard()
		End If
	End Sub 'Clear
	
	Public Function GetText() As String
	'----------------------------------------------------------------------------------------------------------------------- GetText		
' This function will return the text currently in the Windows 95/NT clipboard
' It will return an empty string if there is an image in the clipboard
		
		Const MAXSIZE = 4096
		
		Dim hClipMemory As Long
		Dim lpClipMemory As Long
		Dim MyString As String *MaxSize
		Dim TrimmedString As String
		Dim RetVal As Long
		Dim returnInt As Integer
		
		If OpenClipboard(0&) = 0 Then
			Error ERROR_BASE + 1, ERROR_CB_BUSY 
		End If
		
		On Error GoTo eh
		
' Obtain the handle to the global memory block that is referencing the text.
		hClipMemory = GetClipboardData(CF_TEXT) 
		
' Lock Clipboard memory so we can reference the actual data string.
		lpClipMemory = GlobalLock(hClipMemory)
		
		If lpClipMemory <> 0 Then 
			MyString = Space$(MAXSIZE)
			RetVal = lstrcpyA(MyString, lpClipMemory)
			RetVal = GlobalUnlock(hClipMemory)
			If InStr(1, MyString, Chr$(0)) > 0 then 
				MyString = Mid(MyString, 1, InStr(1, MyString, Chr$(0), 0) - 1) ' Strip off the null terminating character.
			End if
			TrimmedString = Trim(MyString) 
		'Else
		'	Error ERROR_BASE + 3, ERROR_MEM_LOCK 
		End If
		
OutOfHere: 
		RetVal = CloseClipboard()
		GetText = TrimmedString
		
done:
		exit function
eh:
		Error Err, Error & " (line: " & Erl & ")"
	End Function 'GetText
	
	Public Sub SetText( Text As String )
	'----------------------------------------------------------------------------------------------------------------------- SetText		
		Dim hGlobalMemory As Long
		Dim lpGlobalMemory As Long
		Dim ret As Long
		
		On Error GoTo error_handler
		
' Allocate memory
		hGlobalMemory = GlobalAlloc(CLng(GMEM_MOVEABLE Or GMEM_ZEROINIT), CLng(Len(Text)+1))
		If hGlobalMemory Then
			lpGlobalMemory = GlobalLock(hGlobalMemory)
			If lpGlobalMemory Then
				ret = lstrcpyB( lpGlobalMemory, Text )
				Call GlobalUnlock(hGlobalMemory)
				If OpenClipboard( 0 ) Then
					ret = EmptyClipboard()
					ret = SetClipboardData(CF_TEXT, hGlobalMemory)
					ret = CloseClipboard()
				End If
			Else
				Error ERROR_BASE + 4, ERROR_MEM_ALLOC 
			End If
		Else
			Error ERROR_BASE + 5, ERROR_MEM_ALLOC 
		End If
done:
		Exit Sub
error_handler:
		Error Err, error 
	End Sub 'setText
	
	Sub New()
	End Sub
	
	Sub Delete()
		Call CloseClipboard()
	End sub
End Class 
'++LotusScript Development Environment:2:1:GetDirDlg:6:8


'#####################################################################################################
'LOCAL BROWSE
'#####################################################################################################
Function GetDirDlg() As String
	
	Dim lpIDList As Long
	Dim sBuffer As String
	Dim sTitle As String
	Dim tBrowseInfo As BrowseInfo
	
	sTitle = "Select the Folder"
	
	tBrowseInfo.hwndOwner = 0&
	tBrowseInfo.lpszTitle = sTitle
	tBrowseInfo.ulFlags = BIF_RETURNONLYFSDIRS + BIF_DONTGOBELOWDOMAIN
	
	lpIDList = SHBrowseForFolder(tBrowseInfo)
	
	If (lpIDList) Then
		sBuffer = Space(MAX_PATH)
		SHGetPathFromIDList lpIDList, sBuffer
		sBuffer = Left(sBuffer, Instr(sBuffer, Chr$(0) ) - 1)
		If Right$(sBuffer, 1) <> "\" Then sBuffer = sBuffer + "\"
		GetDirDlg = sBuffer
	Else
		GetDirDlg = ""
	End If
	
End Function











'++LotusScript Development Environment:2:1:LastDllErrorInfo:1:8
Public Function LastDllErrorInfo(Byval ErrN As Integer) As String   
'	Dim Buffer As String   
'	Buffer = Space(200)  
'	Call   FormatMessage( FORMAT_MESSAGE_FROM_SYSTEM, 0, ErrN, LANG_NEUTRAL, Buffer, 200, 0)   
'	LastDllErrorInfo = Buffer
	
		Dim txt As String
	Select Case ErrN :
		Case  0 : txt = "The operating system is out of memory or resources."
		Case  2 : txt = "The specified file was not found"
		Case  3 : txt = "The specified path was not found."
		Case  5 : txt = "Windows 95 only: The operating system denied access to the specified file"
		Case  8 : txt = "Windows 95 only: There was not enough memory to " _
		+ "complete the operation."
		Case 10 : txt = "Wrong Windows version"
		Case 11 : txt = "The .EXE file is invalid (non-Win32 .EXE or " _
		+ "error in .EXE image)."
		Case 12 : txt = "Application was designed for a different operating system"
		Case 13 : txt = "Application was designed for MS-DOS 4.0"
		Case 15 : txt = "Attempt to load a real-mode program"
		Case 16 : txt = "Attempt to load a second instance of "_
			+ "an application with non-readonly data segments"
		Case 19 : txt = "Attempt to load a compressed application file"
		Case 20 : txt = "Dynamic-link library (DLL) file failure"
		Case 26 : txt = "A sharing violation occurred."
		Case 27 : txt = "The filename association is incomplete or invalid."
		Case 28 : txt = "The DDE transaction could not be completed " _
		+ "because the request timed out."
		Case 29 : txt = "The DDE transaction failed."
		Case 30 : txt = "The DDE transaction could not be completed because "_
			+ "other DDE transactions were being processed."
		Case 31 : txt = "There is no application associated with "_
			+ "the given filename extension."
		Case 32 : txt = "Windows 95 only: The specified dynamic-link "_ 
			+ "library was not found."
		Case Else:
	End Select
		
	LastDllErrorInfo = txt	
	
End Function

'++LotusScript Development Environment:2:1:OpenFileDlg:6:8


'#####################################################################################################
'LOCAL BROWSE
'#####################################################################################################
Function OpenFileDlg ()
	Dim Title As String    
	Dim DefExt As String
	Dim szCurDir As String 
	Dim APIResults%
	
     'Unknown function
     ' SetFileFilter
	
     'Give the dialog a caption title.
	Title = "Add supporting document" & Chr$(0)
	
     'Allocate string space for returned strings
	FileName = Chr$(0) & Space$(255) & Chr$(0)
	FileTitle = Space$(255) & Chr$(0)
	
     'If the user does not specify an extension, append TXT.
	DefExt = "BMP" & Chr$(0)
	
     'Set up the default directory
	szCurDir = Curdir$ & Chr$(0)
	
     'Set up the data structure before you call the GetOpenFileName
	
	OPENFILENAME.lStructSize = Len(OPENFILENAME)
	
     'If the OpenFile Dialog box is not linked to any form use this line.
     'It will pass a null pointer.
	
	OPENFILENAME.hwndOwner = 0&
	
	OPENFILENAME.lpstrFilter =  Filter
	OPENFILENAME.nFilterIndex = 1
	OPENFILENAME.lpstrFile = FileName
	OPENFILENAME.nMaxFile = Len(FileName)
	OPENFILENAME.lpstrFileTitle = FileTitle
	OPENFILENAME.nMaxFileTitle = Len(FileTitle)
	OPENFILENAME.lpstrTitle = Title
	OPENFILENAME.Flags = OFN_FILEMUSTEXIST
	OPENFILENAME.lpstrDefExt = DefExt
	OPENFILENAME.hInstance = 0
	OPENFILENAME.lpstrCustomFilter = 0
	OPENFILENAME.nMaxCustFilter = 0
	OPENFILENAME.lpstrInitialDir = szCurDir
	OPENFILENAME.nFileOffset = 0
	OPENFILENAME.nFileExtension = 0
	OPENFILENAME.lCustData = 0
	OPENFILENAME.lpfnHook = 0
	OPENFILENAME.lpTemplateName = 0
	
     'This will pass the desired data structure to the Windows API,
     'which will in turn it uses to display the Open Dialog form.   
	APIResults% = GetOpenFileName(OPENFILENAME)
	
	If APIResults% <> 0 Then          
		FileName = Cstr( OPENFILENAME.lpstrFile )
		FileTitle = Cstr( OPENFILENAME.lpstrFileTitle )        
		OpenFileDlg = 1
	Else 
		OpenFileDlg = 0
	End If
End Function
