'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Declare
Use "cls.fw.memo"
Use "cls.utils"

%REM
6.15 majkilde 2.5.2013
- Refactor class ImportMail. Now it is easier to make sub clasess 
6.2 Fixed the pick method
5.6.2. Add a param to Function importAsResponse( parent As notesDocument, inheritFromParent As Variant  ) 
4.0.1 Added importMail class
%END REM  

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Public Class ImportMail As AbstractObject
Declare Public Class Memo As AbstractObject
Declare Public Class MemoUI As Memo

'++LotusScript Development Environment:2:5:(Declarations):0:10


Public Class ImportMail As AbstractObject
'#######################################################################################################
	Private ws As NotesUIWorkspace
	Private db As NotesDatabase
	Private mailDb As NotesDatabase
	Private makeResponses As Boolean
	
	Sub new()
		Set ws = New NotesUIWorkspace	
		Set Me.db = session.currentDatabase
		Call getMailDb()
		makeResponses = true
	End Sub
	
	%REM
		Function getMailDb
		Description: Comments for Function
	%END REM
	Function getMailDb() As NotesDatabase
		On Error GoTo eh
		If mailDb Is Nothing Then
			Set mailDb = New NotesDatabase( "","" )
			Call mailDb.OpenMail()	
		End If
		
		Set getMailDb = mailDb
		If Not mailDb.IsOpen Then Print "Error - can't open the mail database" : End
		
done:
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function
	
	%REM
		Function pickTargetDocument
		Description: Comments for Function
	%END REM
	Function pickTargetDocument( view As NotesView, title As String, prompt As String, singlecategory As string ) As NotesDocument
		On Error GoTo eh
		
		Dim coll As NotesDocumentCollection
		
		If singlecategory = "" Then
			Set coll = ws.Picklistcollection(PICKLIST_CUSTOM, False, view.Parent.Server, view.Parent.Filepath, view.Name, Title, Prompt )
		Else
			Set coll = ws.Picklistcollection(PICKLIST_CUSTOM, False, view.Parent.Server, view.Parent.Filepath, view.Name, Title, Prompt, Singlecategory)	
		End If
		
		If coll is Nothing Then Exit Function
		Set pickTargetDocument = coll.Getfirstdocument()
		
done:
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function
	
	%REM
		Function pickMailsFromInbox
		Description: Comments for Function
	%END REM
	Function pickMailsFromInbox() As NotesDocumentCollection
		On Error GoTo eh
		Set pickMailsFromInbox = ws.PickListCollection( PICKLIST_CUSTOM, True, mailDb.server,mailDb.filepath,"($All)","Import mail", "Select mail(s) to import" )
		
done:
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function
	
	%REM
		Function inheritFromParent
		Please override this method
	%END REM
	Function inherit( doc As NotesDocument, parent As NotesDocument )
		
	End Function
	
	%REM
		Function copyMails
		parent: NotesDocument or NotesDatabase ref
	%END REM
	Function copyMails( coll As NotesDocumentCollection, target As variant )
		On Error GoTo eh
		Dim doc As NotesDocument
		Dim mail As NotesDocument
		Dim p As New Progress( coll.count )
		
		Set mail = coll.Getfirstdocument()
		Do Until mail Is Nothing
		If mail.Isdeleted Then GoTo nextmail
		If Not mail.Isvalid Then GoTo nextmail
		If mail.Hasitem("$conflict") Then GoTo nextmail	
			
			Select case TypeName( target ) 
			Case "NOTESDOCUMENT":
				Dim parent As NotesDocument
				Set parent = target
				Set doc = copyMailToParent( mail, parent )
						
			Case Else
				Dim database As NotesDatabase
				Set database = CacheManager.getDatabase(target) 
				Set doc = copyMailToDatabase( mail, database )
				
			End Select

If Not doc Is Nothing then			
			Call doc.Computewithform(False, False )
			Call doc.save( True, False )
			
			Call p.print( "Processed %1 - estimated time left: %3", p.increment())
			End if	
nextmail:
			Set mail = coll.Getnextdocument(mail)
		Loop
		
		
done:
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function
	
	
	%REM
		Function copyMailToParent
		Description: Comments for Function
	%END REM
	Function copyMailToParent( mail As NotesDocument, parent As NotesDocument ) As NotesDocument
		On Error GoTo eh
		If Not doCopy( mail ) Then GoTo done
		Dim doc As NotesDocument
		Set doc = copyMailToDatabase( mail, parent.Parentdatabase )
		
		If makeResponses Then 
			Call doc.Makeresponse(parent)
		End if
		Call inherit( doc, parent )
		
		
		Set copyMailToParent = doc
		
		
done:
		Exit Function
eh:
		Error Err, getErrorInfo( Me ) 
	End Function
	
		
	
	%REM
		Function doCopy
		Description: Override this
	%END REM
	Function doCopy( mail As NotesDocument ) As Boolean
		Dim view As NotesView
		Set view = CacheManager.getView(db, "lookupByMessageId")
		
		Dim tmpDoc As NotesDocument
		If view Is Nothing Then
			Dim coll As NotesDocumentCollection
			Set coll = db.search( parseParam( {$messageId="%1"}, mail.Getitemvalue("$messageId")( 0 )), Nothing, 0 )
			Set tmpDoc = coll.Getfirstdocument()
		Else
			Set tmpDoc = CacheManager.getDocument(db, view, mail.Getitemvalue("$messageId" )( 0 ))
		End If
		
		If tmpDoc Is Nothing then
			doCopy = True
		Else
			doCopy = False
			Print parseParams( "Mail from %1: '%2' allready exits in database", mail.form( 0 ), mail.subject( 0 ), "", "" ) 
		End if
	End Function
	
	
	%REM
		Function copyMails
		Description: Comments for Function
	%END REM
	Function copyMailToDatabase( mail As notesDocument, db As NotesDatabase ) As NotesDocument
		On Error GoTo eh
		If Not doCopy( mail ) Then GoTo done
		
		Dim doc As NotesDocument
		Set doc = mail.Copytodatabase(db)
		
		doc.form = "Memo"
		doc.imported = Now
		doc.importedBy = session.username
		
		'remove encryption
		If doc.Isencrypted Then
			'The below loop is mandatory to ensure that all $File entries are unecrypted 
			ForAll i In doc.items
				If i.isencrypted Then
					i.isencrypted=False
				End If
			End ForAll 
			
			Call doc.Removeitem("encrypt")
			Call doc.Removeitem("SecretEncryptionKeys")
			
		End If
		
		'remove readers fields
		ForAll item In doc.Items
			If item.Isreaders Then
				item.Isreaders = false
			End If
		End ForAll
		
		'set the defaults
		doc.form = "Memo"
		doc.imported = Now
		doc.importedBy = session.username
		
		'remove $ref
		Call doc.Removeitem("$ref")
		
		Set copyMailToDatabase = doc
		
done:
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function
	
	
	
	%REM
		@DEPRECATED
	%ENDREM
	Function importAsResponse( parent As notesDocument, inheritFromParent As Variant ) As Boolean
		On Error GoTo eh
		Dim coll As NotesDocumentCollection
		Dim doc As NotesDocument
		Dim mailDoc As NotesDocument
		
		importAsResponse = False
		
		
		If parent Is Nothing Then
			If ws.CurrentDocument Is Nothing Then
				Set parent = session.DocumentContext 'selected in view
			Else
				Set parent = ws.CurrentDocument.Document 'current open document
			End If
		End If
		
		Set coll = pickMailsFromInbox()
		
		Set mailDoc = coll.GetFirstDocument()
		Do Until mailDoc Is Nothing
			
			Set doc = copyMailToParent( maildoc, parent ) 
'			Set doc = mailDoc.CopyToDatabase( db )
'			Call doc.MakeResponse( parent )
			
			If Isarray( inheritFromParent ) Then
				Forall fieldName In inheritFromParent
					If fieldname <> "" Then
						Call doc.ReplaceItemValue( fieldName, parent.GetItemValue( fieldName ))
					End If
				End Forall
			End If
			
'			doc.form = "Memo"
'			doc.imported = Now
'			doc.importedBy = session.username
'			
			Call doc.ComputeWithForm( False,False )
			Call doc.Save( True, False )
			
			Set mailDoc = coll.GetNextDocument( mailDoc )
		Loop	
		
		importAsResponse = True
		
done:
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function
	
	%REM
		Function exportSeletedMails
		Description: Comments for Function
	%END REM
	Function exportMails( coll As NotesDocumentCollection, target As Variant )
		On Error GoTo eh
		Dim p As New Progress( coll.Count )
		
		Dim doc As NotesDocument
		
		Dim mail As NotesDocument
		Set mail = coll.Getfirstdocument()
		Do Until mail Is nothing
		Select Case TypeName( target ) 
			Case "NOTESDOCUMENT":
				Dim parent As NotesDocument
				Set parent = target
				Set doc = copyMailToParent( mail, parent )
				
			Case Else
				Dim database As NotesDatabase
				Set database = CacheManager.getDatabase(target) 
				Set doc = copyMailToDatabase( mail, database )
				
		End Select
			
			
			If Not doc Is Nothing Then			
			Call doc.Computewithform(False, False )
			Call doc.save( True, False )
			
			Call p.print( "Processed %1 - estimated time left: %3", p.increment())
		End If	
nextmail:
			Set mail = coll.Getnextdocument(mail)
		Loop
		
done:
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function
	
	
	
	%REM
		Function export
		Description: Comments for Function
	%END REM
	Function export( targetPickList As notesView)
		On Error GoTo eh
		Dim coll As NotesDocumentCollection
		Set coll = ws.currentView.Documents
		If coll.count = 0 Then
			Call coll.Adddocument(session.Documentcontext)
		End If
		
		Dim target As NotesDocument
		Set target = pickTargetDocument( targetPickList, "Select the parent document", "Select as document", "")

		Call exportMails( coll, target )
		Call ws.Currentview.Deselectall()
done:
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
		
	End Function
	
	
	%REM
		Function import
		Description: Comments for Function
	%END REM
	Function import()
		'get the parent document
		Dim parent As NotesDocument
		Set parent = session.Documentcontext
		If parent Is Nothing Then
			MsgBox "Please select a parent document", 64, "Error"
			End
		End If
		
		'get the source documents
		Dim coll As NotesDocumentCollection
		Set coll = pickMailsFromInbox()
		If coll Is Nothing Then Exit Function
		If coll.count = 0 Then Exit Function
		
		'copy the mails
		Call copyMails( coll, parent )
		
		Call ws.ViewRefresh()
	End Function
End Class

%REM
	You don't need this! (but it is used by the memoUI class)
	
	To create and send a new memo, do this
	
	 dim m as new AbstractMemo( "*", "<template name>" )
	 call m.create( sourceDocuument, nothing )
	 if not m.send() then
	 	print "No mail sent"
	 end if 
%END REM
Public Class Memo As AbstractObject
	'####################################################################################################	
	Private memo As AbstractMemo
	
	Sub New()
		'--------------------------------------------------------------------------------------------------------------------------
	End Sub
	
	%REM
Returns the current memo object
	%END REM
	Public Function getMemo() As AbstractMemo
		'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Set getMemo = memo
	End Function
	
	%REM
Returns the current mail document
	%END REM
	Public Function getDocument() As NotesDocument
		'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Set getDocument = getMemo.getDocument()		
	End Function
	
	%REM
Returns an empty memo template document - with default settings
	%END REM
	Public Function getDefaultTemplate() As NotesDocument
		'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		On Error GoTo eh
		
		Dim mt As New MemoTemplate
		Call mt.create( "*", LCase( session.createname( session.Username).Common ) & "-" & Format(Now, "yyyymmdd-hhmm"))
		Set getDefaultTemplate = mt.getDocument()
		
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function
	
	%REM
db - the template database (optional if template is a document - required if template is a string id)
template: template document or template id (string)
	%END REM
	Public Function setTemplate( db As variant, template As Variant ) As Boolean
		On Error GoTo eh
		
		Set memo = createMemo( db, template )
		setTemplate = True
		
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function 'getMemo
	
	Public Function insert( source As Variant )
		On Error GoTo eh
		Call memo.insert( source )
		
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function
	
	
	Public Function appendFile( filename As String )
		On Error GoTo eh
		Call memo.appendFile( filename )
		
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function
	
	Public Function create( sourceDoc As NotesDocument, sourceColl As NotesDocumentCollection ) As Boolean
		'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		'	If sourceDoc Is Nothing Then
		'		create = False
		'		Call setMessage( 0, "Source document is nothing" )
		'		Exit Function
		'	End If
		On Error GoTo eh
		If Not memo Is Nothing Then
			create = memo.create( sourceDoc, sourceColl )
		Else
			create = False
			Call pushMessage( "No template - please call setTemplate before calling create" )
		End If
		
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function
	
	Public Function process( ) As Boolean
		'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		If memo.send() Then
			Call pushMessage( "Mail sent to " & memo.getRecipientsCount() & " recipients" )
			process = True
		Else
			Call pushMessage( memo.getMessage())
			process = False
		End If
	End Function
	
	Public Function send( ) As Boolean
		'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		send = process
	End Function
	
	
	Public Function sendDocument( doc As NotesDocument ) As Boolean
		On Error GoTo eh
		sendDocument = False
		
		If doc Is Nothing Then
			
			Call pushMessage( "No document" )
			Exit Function
		End If
		If doc.templateId( 0 ) = "" Then
			Call pushMessage( "No template id" )
			Exit Function
		End If
		
		If setTemplate( session.currentDatabase, doc.templateId( 0 )) Then
			Call memo.setDocument( doc )
			sendDocument = memo.send()
		End If
		
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function
End Class
Public Class MemoUI As Memo
	'#######################################################################################################
	Private ws As NotesUIWorkspace
	Private db As NotesDatabase
	
	Sub New()
		Set ws = New NotesUIWorkspace		
		Set db = session.currentDatabase
	End Sub
	
	Public Function pick( title As String, prompt As String, singleCategory As String ) As NotesDocument
		Const VIEWNAME = "pick.memoTemplate"
		
		Dim view As NotesView
		Dim viewNav As NotesViewNavigator
		Dim coll As NotesDocumentCollection
		
		
		Set view = CacheManager.getView( db, VIEWNAME )
		
		If singleCategory = "" Then
			Select Case view.Entrycount
			Case 0 : 
				Set pick = getDefaultTemplate()
				Exit Function
			Case 1: 
				Set pick = view.GetFirstDocument
				Exit Function
			End Select
		Else
			Set coll = view.Getalldocumentsbykey(singleCategory, True)
			Select Case coll.Count
			Case 0 : 
				Set pick = getDefaultTemplate()
				Exit Function
			Case 1: 
				Set pick = coll.GetFirstDocument
				Exit Function
			End Select
		End If
		
		Set coll = ws.PickListCollection( PICKLIST_CUSTOM, False, db.server, db.filepath, VIEWNAME, title, prompt, singleCategory )
		If coll.Count = 1 Then
			Set pick = coll.GetFirstDocument()
		Else
			Set pick = Nothing
		End If
	End Function
	
	
	Public Function process() As Boolean
		If memo.getUI() Then
			Call ws.EditDocument( True, memo.getDocument())
			process = True
		Else
			process = Memo..process()
		End If
	End Function
	
End Class