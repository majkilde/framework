'++LotusScript Development Environment:2:5:(Options):0:72
%REM
	Library AgentScanner
	Created Oct 8, 2009 by Jakob Majkilde/NDK/GEAP
	Description: Comments for Library
%END REM
Option Public
Option Declare
Use "cls.log.6"
Use "cls.agentinfo"
%REM
Rev 6.8.2 majkilde 24.11.09
- New lookupAgentsById view / ids 
Rev 6.8.1 majkilde 19.11.09
- Added the DesignTemplateName to agent documents
Rev 6.8 majkilde 10.11.09
- Fixpack 1
Rev 6.6b majkilde 21.10.09
- Agent Signer & Run on behalf of, added to the agent document
%END REM


'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Class AgentScanner As AbstractObject
Declare Class MyTimer

'++LotusScript Development Environment:2:5:(Declarations):0:10
Class AgentScanner As AbstractObject
	Private logdb As NotesDatabase 'the current database
	Private view As NotesView
	
	Private t1 As MyTimer 'getAgentDocument
	Private t2 As MyTimer 'DXL
	
	Private profile As notesDocument
	
	'source info
	Private sourceDb As NotesDatabase         	
	Private sourceAgent As NotesAgent 			'the CurrentAgent
	
	'The agent document
	Private agentDoc As NotesDocument
	Private agentSchedule As AgentSchedule
	Private agentInfo As AgentInfo
	Private agentNote As NotesDocument
	
	Private srvDoc As NotesDocument
	
	Private cntCreated As Integer
	
	Sub New()
		'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Set logdb = session.CurrentDatabase
		
		'update the server document
		%REM
		Set view = logDb.getView( "lookupServers" )
		Call view.Refresh()
		Dim srvDoc As NotesDocument
		Dim server As New NotesName( session.currentdatabase.Server )
		Dim id As String
		id = LCase( server.abbreviated )
		
		Set srvDoc = view.Getdocumentbykey( id, True )
		If srvDoc Is Nothing Then
			Set srvDoc = logDb.Createdocument()
			srvDoc.form = "Server"
			srvDoc.servername = logdb.Server
			srvDoc.replicate = 1
			srvDoc.id = id
			Call srvdoc.save( True, False )
			Call me.logAction(LOG_NORMAL, parseParam("Server document created for %1", server.common ), srvDoc )
		End If
		srvDoc.date = Now
		Call srvDoc.Save( True, False )
		%ENDREM
		Set view = logDb.GetView( "lookupAgentsById" )
		
		Set t1 = New MyTimer()
		set t2 = New MyTimer()
		
		Set profile = logdb.Getprofiledocument("Setup")
		
		
	End Sub
	
	%REM
		Function ScanAndAdd
		Description: Comments for Function
	%END REM
	Function ScanAndAdd()
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			
		On Error GoTo eh
		Call me.logAction( LOG_NORMAL, parseParam( "Searching for databases on %1", session.Createname(logdb.server).abbreviated), logdb )
		
		Dim dbdir As New NotesDbDirectory( logdb.Server )
		Set sourceDb = dbdir.Getfirstdatabase(DATABASE)
		Do Until sourceDb Is Nothing
			On Error Resume Next
			Call me.logAction( LOG_DEBUG, parseParams( "Checking: %1 (%2)", sourceDb.title, sourceDb.filepath, "", ""), nothing )
			
			If FullTrim( sourceDb.Filepath ) = "" Then GoTo nextdb
			Call sourceDb.open( "", "" )
			On Error GoTo eh
			
			If sourceDb.isopen Then
				Call me.logAction( LOG_VERBOSE, parseParams( "Processing database: %1 (%2)", sourceDb.title, sourceDb.filepath, "", ""), sourceDb )
				
		%REM 'Build collection is too slow...
			Dim coll As NotesNoteCollection
			Set coll = sourceDb.Createnotecollection(False)
			coll.Selectagents = True
			coll.Selectionformula = |$AssistTrigger="1"| 'only scheduled agents
			
			Call coll.Buildcollection()
			Dim noteid As String
			If coll.count > 0 then
			noteid = coll.Getfirstnoteid()
			Call me.logAction( LOG_VERBOSE, coll.count & " scheduled agents found", nothing )
			Do Until noteid = ""
			Set agentnote = sourceDb.Getdocumentbyid(Noteid)	
			Call getAgentDocument
			agentDoc.agentscanner="1"
			Call updateAgentDocument()
			noteid = coll.Getnextnoteid(noteid)
			Loop
			End if
		%ENDREM
				Dim ai As clsDesignAgent
				
				If IsArray( sourceDb.Agents ) Then
					ForAll a In sourceDb.Agents
						Set sourceAgent = a
						If sourceAgent.trigger = TRIGGER_SCHEDULED Then
							Call me.logAction( LOG_DEBUG, parseParam( "Processing agent: %1", sourceAgent.Name ), Nothing )
							Dim url As String
							Dim unid As String
							url = sourceAgent.Notesurl
							unid = StrRightBack( StrLeft( url, "?" ), "/" )
							Set agentNote = sourceDb.Getdocumentbyunid( unid )
							If agentNote Is Nothing Then Call Me.LogAction( LOG_WARNING_LOW, "Can't find agent note for " & sourceAgent.name, Nothing ) : GoTo NEXTAGENT
							%REM
							If agentNote Is Nothing Then
								stop
								Set ai = New clsDesignAgent( sourceDb, sourceAgent.Name ) 
								Set agentNote = ai.getNote()
								If agentNote Is Nothing Then
									'try with a notesNoteCollection
									Dim coll As NotesNoteCollection
									Set coll = sourceDb.Createnotecollection(False)
									coll.Selectagents = True
									coll.Selectionformula = |$Title="| & replace( sourceAgent.Name, |"|, |\"| ) & |"| 'only scheduled agents
									Call coll.Buildcollection()
									Dim noteid As String
									If coll.count > 0 Then
										noteid = coll.Getfirstnoteid()
										Set agentnote = sourceDb.Getdocumentbyid(Noteid)	
									End If
									
									
									If agentNote Is Nothing Then Call Me.LogAction( LOG_WARNING_LOW, "Can't find agent note for " & sourceAgent.name, Nothing ) : GoTo NEXTAGENT
								End if 
							End if
							%ENDREM
							
							Set agentDoc = getAgentDocument()
							If agentDoc Is Nothing Then Call Me.LogAction( LOG_WARNING_LOW, "Can't create agent document for " & sourceAgent.name, Nothing ) : GoTo NEXTAGENT 
							
							agentDoc.agentscanner="1"
							Call updateAgentDocument()
							
							Set agentNote = Nothing
							Set agentDoc = Nothing
							Set agentInfo = Nothing
							Set agentSchedule = Nothing
						End If
NEXTAGENT:
					End ForAll
				Else
					Call me.logAction( LOG_DEBUG, "No agents in database", Nothing )
				End If
				
			Else
				Call me.logAction( LOG_WARNING_LOW, parseParam( "Can't open database: %1", sourceDb.Filepath ), Nothing )	
			End If
NEXTDB:
			Set sourceDb = dbdir.Getnextdatabase()
		Loop
		
		Call me.logAction( LOG_NORMAL, parseParam( "%1 new agents found", cntCreated ), Nothing )
done:
		Exit function
eh:
		If Err() = 4072 Then 'this is "Directory .... does not exist" - happens if server not found
				Call me.logAction( LOG_WARNING_HIGH, Err & " " & getErrorInfo( Me ) & ": Server could not be found. Skipping this server", Nothing )
				Resume done
		End If
			
		Call me.logAction( LOG_FATAL,getErrorInfo( Me ), nothing ) 
		Resume Next
		'Error Err, getErrorInfo( Me )
	End Function
	
	%REM
		Function UpdateExisting
		Description: Comments for Function
	%END REM
	Function UpdateExisting()
		'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		On Error GoTo eh			
		
		Dim agentView As NotesView
		Set agentView = logDb.getView( "lookupAgentsByActiveServer" )
		
		Dim coll As NotesDocumentCollection
		Set coll = agentView.Getalldocumentsbykey( LCase( session.Createname( logDb.server ).abbreviated ), True )
		
		Dim cnt As Integer
		Dim cntDeleted As integer
		Call me.logaction( LOG_NORMAL, parseParam( "Updating %1 agent documents", coll.count ), Nothing )
		
		Dim nextdoc As NotesDocument
		Set agentDoc = coll.Getfirstdocument()
		Do Until agentdoc Is Nothing
			Set nextdoc = coll.Getnextdocument(agentdoc)
			
			If agentdoc.Isdeleted Then GoTo nextdoc
			If Not agentdoc.Isvalid Then GoTo nextdoc
			If agentdoc.Hasitem("$conflict") Then GoTo nextdoc
			
			On Error Resume next
			Set sourceDb = session.getDatabase( logdb.server, agentdoc.filepath( 0 ))
			On Error GoTo eh
			If Not sourceDb.isOpen Then
				Call me.logaction( LOG_NORMAL, parseParams( "Can't open the source database (%1). Agent document deleted; '%2'", agentdoc.filepath( 0 ), agentdoc.agentname( 0 ), "", "" ) , Nothing )
				Call agentdoc.remove( True ) 
				cntDeleted = cntDeleted+1
				GoTo nextdoc
			End if 	
			
			On Error Resume next
			Set agentnote = sourcedb.Getdocumentbyunid(StrLeft( agentdoc.id( 0 ), "#" ))
			Set sourceAgent = sourcedb.Getagent(agentdoc.agentname( 0 ))
			On Error GoTo eh
			If agentnote Is Nothing Or sourceAgent Is Nothing Then
				Call me.logAction( LOG_NORMAL, parseParam( "Can't find the agent: %1. Agent document is now deleted", agentdoc.agentname( 0 )), Nothing )
				Call agentdoc.remove( True )
				cntDeleted = cntDeleted+1
				GoTo nextdoc
			End If
			Set agentSchedule = New AgentSchedule( sourceDb )
			Set agentInfo = agentSchedule.getAgentInfo( agentNote )
			
			Call updateAgentDocument()
			cnt = cnt+1
			
			Set agentNote = Nothing
			Set agentDoc = Nothing
			Set agentInfo = Nothing
			Set agentSchedule = Nothing
nextdoc:
			Set agentdoc = nextdoc
		loop
		
		Call me.logaction( LOG_NORMAL, parseParams( "%1 agents updated, %2 documents deleted", cnt, cntDeleted, "", "" ), Nothing )
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function
	
	Function run()
		'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Dim l As New AgentLog( logdb )
		Call SystemLog.set( l )
		
		If profile.agentscanner( 0 ) <> "1" Then
			Call l.logAction( LOG_NORMAL, "Agent scanner is disabled. Can be enabled on the profile document", Nothing )
			GoTo done
		End If
		
		If profile.fullscan( 0 ) = "daily" Then
			Call ScanAndAdd()
		else
			Select Case Weekday( Today )
			Case 2,3,4,5,6,7
				Call UpdateExisting() 'update alle the existing agent documents
			Case Else:
				Call ScanAndAdd() 'scan all databases on the server
			End Select
		End if		
done:
		'Call l.logAction( LOG_NORMAL, parseParams( "Stats, GetAgentDocument: Called %2 times, total %1 seconds, average: %3 seconds", Round(t1.getSeconds(),2), t1.getCounter(), Round( t1.average(),2 ), "" ), Nothing )
		'Call l.logAction( LOG_NORMAL, parseParams( "Stats, DXL: Called %2 times, total %1 seconds, average: %3 seconds", Round(t2.getSeconds(),2), t2.getCounter(), Round(t2.average(),2), "" ), Nothing )
			If Not srvDoc Is Nothing then
				srvDoc.scannerDate = Now
				Call srvDoc.save( True, False )
			End If
		
		Call l.close()
		Exit Function
eh:
		Call l.logAction(LOG_FAILURE, getErrorInfo( Me ), Nothing )
		Resume done
	End Function

	
	%REM
		From the AgentLog class
	%END REM
	Function getAgentDocument() As NotesDocument
		'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		On Error GoTo eh
		Call t1.start()
		If agentDoc Is Nothing Then
			If sourceAgent Is Nothing Then Exit Function
			If agentNote Is Nothing Then Exit function
			If logDb Is Nothing Then Exit Function
			If Not logdb.isopen Then Exit Function
			If sourceDb Is Nothing Then Exit Function
			
			'Changed
			'Dim view As NotesView
			Dim id As String
			Dim isNew As Boolean
			
			Set agentSchedule = New AgentSchedule( sourceDb )
			Set agentInfo = agentSchedule.getAgentInfo( agentNote )
			
			Dim server As New NotesName( sourceDb.server ) 'session.username )
			id = agentinfo.note.universalId & "#" & server.Common
			
			
			'Changed
			'Set view = logDb.GetView( "lookupAgentsById" )
			If view Is Nothing Then Exit Function
			
			'id lookup fixed (agents can have the same unid across databases)
			Dim id2 As String
			id2 = agentinfo.note.universalId & "." & sourceDb.replicaid & "." & UCase( server.Common )
			Set agentDoc = view.Getdocumentbykey( id2, True )
			
			If agentDoc Is Nothing Then
				Call me.logAction( LOG_DEBUG, "Creating a new agent document", Nothing )
				If Not session.Isonserver Then Exit Function 'don't create when running local
				
				Set agentDoc = logDb.CreateDocument
				agentDoc.form = "Agent"
				agentDoc.id = id
				agentDoc.id2 = id2
				
				'changed
				agentDoc.viewIcon = 166
				
				'Changed
				agentDoc.logMode = "ON"
				agentDoc.logSeverity = "5"
								
				agentDoc.createdBy = session.username
				
				agentDoc.sendScheduleError = "1"
				
				'Changed
				agentDoc.sendScheduleIgnoreDisabled = "1" 
				agentDoc.sendLogError = "1"
				agentDoc.sendSeverity = "3"
				cntCreated = cntCreated+1
				
				Call agentDoc.ReplaceItemValue( "$ConflictAction", "3" ) 
				Call agentDoc.ReplaceItemValue( "$PublicAccess", "1" ) 
				
				agentDoc.updateInfo = "1"
				
				Call agentDoc.Save( True, False )
				Call view.Refresh()
				Call me.logAction( LOG_DEBUG, "Agent document created", agentDoc )
			Else
				agentdoc.id2 = id2
			End If
		End If
		
		Set getAgentDocument = agentDoc
		Call t1.Pause()
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function
	
	
	Function updateAgentDocument()
		'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		On Error goto eh
		If agentDoc Is Nothing Then Exit Function
		
		If Format( agentDoc.agentModifiedDate( 0 ), "yymmddhhnn" ) = Format( agentinfo.note.Lastmodified, "yymmddhhnn" ) Then
			GoTo DXLDONE 'DXL is uptodate
		End If
		
		Call t2.start()
		
		'<Read Agent DXL>
		Call Me.logAction( LOG_DEBUG, parseParams( Now & " Reading agent DXL. Agent date: %1 (%3), Last date: %2 (%4)", agentDoc.agentModifiedDate( 0 ), agentinfo.note.Lastmodified, agentDoc.noteId, agentnote.noteId ), agentdoc )
		agentDoc.agentModifiedDate = agentinfo.note.Lastmodified
		agentDoc.DXLRead = now
		Call agentDoc.save( True, False )
		
		Call agentSchedule.getDXL()
		agentDoc.target = agentinfo.searchtype
		agentdoc.interval = Replace( UCase( Left( agentinfo.intervalType, 1 )), "B", "H" )
		agentdoc.starttime = agentinfo.starttime
		agentdoc.endtime = agentinfo.endtime
		agentdoc.intervaltime = agentinfo.interval
		agentdoc.time1 = agentinfo.time1
		agentdoc.time2 = agentinfo.time2
		If agentinfo.onweekends Then
			agentdoc.weekends = "1"
		Else
			agentdoc.weekends = "0"
		End If
		agentdoc.location= agentinfo.runlocation
		agentdoc.restrictions = agentinfo.restrictions
		
		agentdoc.scheduleInfo = agentinfo.scheduleInfo
		
		If Not agentinfo.runserver Is Nothing Then
			agentDoc.servername = agentinfo.runserver.abbreviated
		End If
		agentdoc.designerversion = agentinfo.designerversion
		
		Call Me.logAction( LOG_DEBUG, "Agent document updated with scheduling info extracted from DXL", agentDoc )
		'</Read Agent DXL>		
		Call t2.pause()
DXLDONE:
		agentDoc.dbTitle = sourceDb.Title
		agentDoc.agentName = agentInfo.agentName
		agentDoc.subject = agentDoc.agentName( 0 ) & " (" & sourceDb.Title & ")"
		agentDoc.server = sourceDb.Server
		agentDoc.filepath = sourceDb.FilePath
		agentDoc.replicaId = sourceDb.ReplicaID
		agentDoc.trigger = agentinfo.trigger
		agentdoc.designTemplateName = sourceDb.Designtemplatename
		
		agentDoc.agentSigner = agentinfo.signer.Abbreviated
		agentDoc.onBehalfOf = agentinfo.onBehalfOf.Abbreviated
		agentDoc.owner = agentinfo.owner.abbreviated
		
		'changed
		agentDoc.lastRun = agentInfo.agent.Lastrun 'Now
		agentDoc.agentsize = agentinfo.note.size
		agentDoc.agentModifiedDate = agentinfo.note.Lastmodified
		agentDoc.machineName = agentinfo.note.getItemvalue( "$MachineName" )
		
		'Changed
		%REM
			'create links
			Dim prevlog As NotesDocument
			On Error Resume Next
			Set prevlog = logDb.getDocumentByUnid( agentdoc.lastLogUnid( 0 ))
			agentdoc.lastLogUnid = logdoc.UniversalID
			
			If prevlog Is Nothing Then GoTo DONE
			If prevlog.IsDeleted Then GoTo DONE
			If Not prevlog.IsValid Then GoTo DONE
			
			prevlog.nextLogUnid = logdoc.UniversalID
			Call prevlog.Save( True, False )
			
			logdoc.prevLogUnid = prevlog.UniversalID
		%ENDREM
DONE:
		Call agentDoc.Save( True, False )
		
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function
	
End Class
Class MyTimer
	private current As Variant
	private total As Variant
	Private cnt As Long
	
	Sub New()
		%REM
			public const LSI_THREAD_LINE=0
			public const LSI_THREAD_PROC=1
			public const LSI_THREAD_MODULE=2
			public const LSI_THREAD_VERSION=3
			public const LSI_THREAD_LANGUAGE=4
			public const LSI_THREAD_COUNTRY=5
			public const LSI_THREAD_TICKS=6
			public const LSI_THREAD_TICKS_PER_SEC=7
			public const LSI_THREAD_PROCESS_ID=8
			public const LSI_THREAD_TASK_ID=9
			public const LSI_THREAD_CALLPROC=10
			public const LSI_THREAD_CALLMODULE=11
		%END REM
		current = 0
		total = 0
	End Sub
	
	Function start()
		cnt = cnt+1
		If current <> 0 Then
			total = total + ( GetThreadInfo( 6 )-current )
		End If
		current = GetThreadInfo( 6 )
	End Function
	
	Function Pause()
		total = total + ( GetThreadInfo( 6 )-current )
		current = 0
	End Function

	Function getSeconds() As Double
		Dim ticks As Variant
		ticks = GetThreadInfo( 7 )
		If current <> 0 Then
			getSeconds = ( total + ( GetThreadInfo( 6 )-current )) / ticks
		Else
			getSeconds = total / ticks
		End If
	End Function
	

	Function average() As Double
		If cnt > 0 then
			average = getSeconds() / cnt
		Else
			average = 0
		End if
	End Function
	
	Function getCounter() As long
		getCounter = cnt	
	End Function
End Class
