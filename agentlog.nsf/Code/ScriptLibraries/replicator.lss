'++LotusScript Development Environment:2:5:(Options):0:72
Option Public
Option Declare
Use "cls.system"
Use "cls.fw"
Use "cls.log.6"

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Class Replicator As AbstractObject

'++LotusScript Development Environment:2:5:(Declarations):0:10

%REM
Rev 6.13.3 majkilde 1.06.2010
- Hubservers can now include groups
Rev 6.9.1. majkilde 7.4.2010
- Fixed the replication formula for hub servers (mode=settings)
Rev 6.9 majkilde 26.01.2010
- Setting the purge interval 
- don't enable/disable replication (don't overwrite manual settings)
Rev 6.8 majkilde 28.10.09
- Reports included in replication formulas
Rev 6.7 majkilde 22.10.09
- Optimized (replication formulas is now replicated)
Rev 6.1.1 Majkilde 10.6.09
- Fixed / replication now works :-)
%END REM
Class Replicator As AbstractObject
'#################################################################
	Private db As NotesDatabase
	Private profile As NotesDocument
	Private rep As NotesReplication
	
	Sub New()
	'---------------------------------------------------------------------------------------------------------	
		Set db = session.CurrentDatabase
		Set profile = db.GetProfileDocument( "Setup" )	
		Set rep = db.ReplicationInfo
	End Sub
	
	%REM
		Function disableSelectiveReplication
		Description: Removes all replication formulas from the database
		Updates the profile document is needed
		Returns true on changes
	%END REM
	Private Function disableSelectiveReplication() As Boolean
	'---------------------------------------------------------------------------------------------------------
		On Error GoTo eh
			
		Dim coll As NotesNoteCollection
		Dim noteid As String
		Dim note As NotesDocument
		
		Set coll = db.Createnotecollection(False )
		coll.Selectreplicationformulas = True
		Call coll.Buildcollection()
		If coll.count > 0 Then
			noteid = coll.Getfirstnoteid()
			Do Until noteid = ""
				Set note = db.Getdocumentbyid(Noteid)
				Call note.Remove(True)
				noteid = coll.Getnextnoteid(noteid)
			Loop
		
			Call me.logAction(LOG_NORMAL, coll.count & " replication formulas deleted from this replica", Nothing )
			disableSelectiveReplication = True
		Else
			disableSelectiveReplication = False
		End If		

		Exit Function
eh:
		Error Err, Error & getErrorInfo( Me )
	End Function
	
	%REM
		Function deleteNotReplicatingFormulas
		Description: delete all formula's that is not replicated
		Returns true on changes
	%END REM
	Function deleteNotReplicatingFormulas() As Boolean
	'---------------------------------------------------------------------------------------------------------	
		Const REPLICATION_FLAG% = &b100000000000
		Dim coll As NotesNoteCollection
		Dim noteid As String
		Dim note As NotesDocument
		Dim i As Integer
		Dim cnt As Integer
		
		Set coll = db.Createnotecollection(False )
		coll.Selectreplicationformulas = True
		Call coll.Buildcollection()
		noteid = coll.Getfirstnoteid()
		Do Until noteid = ""
			Set note = db.Getdocumentbyid(Noteid)
			i = note.Getitemvalue("$ReplClassMasks")( 0 )
			If ( i And REPLICATION_FLAG% ) = 0 Then
				'replication not set - remove the replication formula
				Call note.remove( True )
				cnt = cnt +1
			End If
			
			noteid = coll.Getnextnoteid(noteid)
		Loop
		If cnt > 0 Then 
			Call me.LogAction( LOG_NORMAL, cnt & " 'not replicated' replication formulas removed", Nothing )
			deleteNotReplicatingFormulas = True
		Else
			deleteNotReplicatingFormulas = False
		End If
		
	End Function
	
	Function configure() As Boolean
	'---------------------------------------------------------------------------------------------------------	
		On Error GoTo ERRORHANDLER
		configure = False
		
		%REM
		All|all
		Aggregate on hub servers|hub
		Settings only|settings
		Disabled|off
		%END REM
		Dim rep As NotesReplication
		Set rep = db.Replicationinfo
		
		If CStr( profile.Cutoffinterval( 0 )) <> "" Then 'set the purge interval
			If profile.Cutoffinterval( 0 ) <> rep.Cutoffinterval Then
				Call Me.logAction( LOG_NORMAL, parseParams( "Cutoff interval change from %1 to %2 days", rep.Cutoffinterval, profile.Cutoffinterval( 0 ), "", "" ), Nothing )
				rep.Cutoffinterval = profile.Cutoffinterval( 0 )
				Call rep.Save()
			End If
		End If
		
		'enable/disable replication	
		%REM 'no - we don't want do overrule manual settings
		Select Case profile.replication( 0 )
		Case "off": 
			If Not rep.Disabled Then
				rep.Disabled = True
				Call rep.Save()
				Call Me.logAction( LOG_NORMAL, "Replication disabled", Nothing )
			End If
		Case Else:
			If rep.Disabled Then
				rep.Disabled = False
				Call rep.Save()
				Call Me.logAction( LOG_NORMAL, "Replication enabled", Nothing )
			End If
		End Select
		%ENDREM
		
		'control the replication formulas
		Dim formula As String
		Select Case profile.replication( 0 )
		Case "all":
			If disableSelectiveReplication() Then
				Call Me.logAction( LOG_NORMAL, "Full replication enabled", Nothing )
				Call rep.Clearhistory() 'clear the replication history
			End If
			
		Case "hub":
			Call deleteNotReplicatingFormulas()
			If isHub( db.server ) Then
				formula = {@all}
			Else
				formula = {systemDocument=1 | server:agentdbserver="} & db.server & {"}
			End If
			
			If SetRepFormula( db, db.server, formula ) Then
				Call Me.logAction( LOG_NORMAL, "Selective replication formulas updated: " & formula, Nothing )
				Call rep.Clearhistory() 'clear the replication history
			End If
					
		Case "settings":
			Call deleteNotReplicatingFormulas()
			formula = {systemDocument=1 | server:agentdbserver="} & db.server & {"}
			If isHub( db.server ) Then
				formula = formula & { | @text(replicate)="1"}
			End If
			
			If SetRepFormula( db, db.server, formula ) Then
				Call Me.logAction( LOG_NORMAL, "Selective replication formulas updated: " & formula, Nothing )
				Call rep.Clearhistory() 'clear the replication history
			End If
		Case "off":
			'has allready been disabled
		End Select

		
		configure = True
		
		Exit Function
ERRORHANDLER:
		Error Err, Error & getErrorInfo( Me )
	End Function

Function SetRepFormula(db As NotesDatabase, ByVal sServer As String, ByVal sRepFormula As String ) As Boolean
'---------------------------------------------------------------------------------------------------------	
	Dim Rep As NotesReplication
	Dim RepEntry As NotesReplicationEntry
		
	Set Rep = db.ReplicationInfo
		
	Set RepEntry = Rep.GetEntry( "-", sServer, False )
	If Not RepEntry Is Nothing Then
		If StrComp( RepEntry.Formula, sRepFormula, 5 ) <> 0 Then
			Call RemoveAllRepFormulas( db, sServer )
			Set RepEntry = Nothing
		End If
	End If
	
	If RepEntry Is Nothing Then
		Set RepEntry = Rep.GetEntry( "-", sServer, True )
		RepEntry.Formula = sRepFormula
		RepEntry.IsIncludeACL = True
		RepEntry.IsIncludeAgents = True
		RepEntry.IsIncludeDocuments = True
		RepEntry.IsIncludeForms = True
		RepEntry.IsIncludeFormulas = True
		Call RepEntry.Save()
		
		Call Rep.ClearHistory()
		Rep.Disabled = False
		Rep.Abstract = False
		Rep.CutoffDelete = False
		Rep.CutoffInterval = 90
		Rep.IgnoreDeletes = False
		Rep.IgnoreDestDeletes = False
		'Rep.Priority = DB_REPLICATION_PRIORITY_HIGH
		Call Rep.Save()
		SetRepFormula = True
	Else
		SetRepFormula = False
	End If
End Function

Sub RemoveAllRepFormulas( db As NotesDatabase, sServer As String )
'---------------------------------------------------------------------------------------------------------	
	Dim notecoll As NotesNoteCollection
	Dim sNoteID As String
	Dim doc As NotesDocument
	
	Set noteColl = db.CreateNoteCollection( False )
	notecoll.SelectReplicationFormulas = True
	If sServer <> "" Then
		notecoll.SelectionFormula = {@LowerCase(@Name([cn]; $Title)) = @LowerCase(@Name([cn]; "} & sServer & {"))}
	End If
	Call noteColl.BuildCollection()
	
	sNoteID = notecoll.GetFirstNoteId()
	While sNoteID <> "" 
		Set doc = db.GetDocumentByID( sNoteID )
		Call doc.Remove(True)
		
		sNoteID = notecoll.GetNextNoteId(sNoteID)
	Wend
End Sub

Private Function IsHub( sServer As String ) As Boolean
'---------------------------------------------------------------------------------------------------------	
	'If profile.replication( 0 ) <> "hub" Then GoTo done 'hub servers not used
	
	Dim nnServer As NotesName
	Dim nnHub As NotesName
	
	Set nnServer = New NotesName( sServer )
	
	Dim servers As Variant
	servers = getMembers( profile.hubservers )
	ForAll hub In servers
		Set nnHub = New NotesName( hub )
		If StrCompare( nnServer.Abbreviated, nnHub.Abbreviated, 5 ) = 0 Then
			isHub = True
			Exit Function
		End If
	End ForAll
	
done:
	IsHub = False
End Function

%REM
	Function runAgent
	Description: Comments for Function
%END REM
Function runAgent()
	On Error GoTo ERRORHANDLER
	
	Dim session As New NotesSession
	Dim db As NotesDatabase
	
	Set db = session.CurrentDatabase
	
	Dim l As New AgentLog( db )
	Call SystemLog.set( l )
	
	Dim r As New Replicator
	Call r.configure()
	
DONE:
	Call l.close()
	Exit function
ERRORHANDLER:
	If Not session.Isonserver Then Print getErrorInfo( session.Currentagent )
	Call l.logAction( LOG_FATAL, parseParams( "Error %1 %2 %3 %4", Err, Error, Erl, "" ), Nothing )
	Resume DONE
End Function

Function getMembers( GroupOrNameList As Variant ) As Variant
	
	Dim members As Variant
	
	'find a server (use the homeserver if script is running on a local database)
	Dim server As Variant
	server = Evaluate(|@if( @subset( @dbname;1 ) = ""; @LocationGetInfo([HomeServer]); @subset( @dbname;1 ))|)
	
	If IsArray( GroupOrNameList ) Then
		ForAll member In GroupOrNameList
			If IsEmpty( members ) Then
				members = getMembers( member )
			Else
				members = ArrayAppend( members, getMembers( member ))
			End If
		End ForAll
	Else
		members = Evaluate(|@ExpandNameList( "| & server( 0 ) & |":"names.nsf"; "| & GroupOrNameList & |" )|)
	End If
	
		'fix problem with persons with an forward address on the person document
	Dim i As Integer
	Dim v As Variant
	For i=0 To UBound(members)
		If Left(members(i), 3)<>"cn=" Then
			v = Evaluate(|@NameLookup( [NoUpdate] ; "|+members(i)+|"; "fullname")|)
			
			If Not IsEmpty(v) Then
				If v( 0 ) <> "" then
					members(i)=v(0)	
				End if
			End If		
		End If
	Next
	
		'remove duplets
	members = ArrayUnique( members,5 )
	
		'return
	getMembers = members 
End Function
End Class