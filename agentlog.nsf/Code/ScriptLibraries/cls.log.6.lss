'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Declare
Use "cls.system"


%REM
**************************************************************************************************************************'
COPYRIGHT 2003-2007 by MAJKILDE Aps
**************************************************************************************************************************'
This library is programmed and owned by MAJKILDE Aps
Under the copyright laws, neither the documentation nor the software may be copied, photocopied, 
reproduced, translated, resold, or reduced to any electronic medium or machine-readable form, 
in whole or in part, without the prior written consent of MAJKILDE Aps, except in the manner described 
in the documentation or the applicable licensing agreement governing the use of the software.
**************************************************************************************************************************'
%ENDREM


%REM
Rev 6.5.1 majkilde 27.05.2011
- Added NotesBuildVersion to the log document
Rev 6.14.1 majkilde 26.08.2010
- Cleared more fields when re-using log documents
Rev 6.14 majkilde 1.06.2010
- Better links (using getLinkComment)
- Clear the msg field when reusing log documents
Rev 6.13 majkilde 17.03.2010
- Performance improvements (setNote & createLogDocument methods) - removing the BuildNotesCollection
Rev 6.10 majkilde 26.1.2010
- Reuse log documents (instead of create new and deleting old) 
Rev 6.9 majkilde 20.1.2010
- Forced replication of agent documents
- Added a 'lastmsg' to the agent document
Rev 6.8.5 majkilde 7.1.2010
- Always save logdocument in debug mode
Rev 6.8.2 majkilde 24.11.09
- View lookpupAgentsById updated with new ids
Rev 6.8.1 majkilde 19.11.09
- DesignTemplateName added to the agentdocument
Rev 6.7 majkilde 22.10.09
- Small fixes
Rev 6.6b majkilde 21.10.09
- Agent Signer & Run on behalf of, added to the agent document
Rev 6.6a 15.10.09
- Id updated
Rev 6.6 majkilde 8.10.09
- AgentScanner upgrade	
Rev 6.3.2 majkilde 18.08.09
- Only create the agent dcument when running on a server
Rev 6.3
- Fixed a problem if the logdb is nothing
Rev 6.2.1 majkilde 24.6.09
- default values on the agent doc changed
Rev 6.1 3/6-09 majkilde
- Made standard NotesLog compliant (alog4.ntf)
Rev 6.0.1
- more views
- prev/next navigation added to log documents
Rev 5.6
- Agent documents/monitors added
Rev 5.5.1
- Fixed a small but essential error
Rev 5.5
- Dont stop on errors, not even if there is no log database
Rev 5.2
- Improved error handling
Rev 4.2
	- Logging can now be done from none agents (e.g. buttons or form events)
Rev 4.1a
	- Some extra error checking when adding a link
Rev 4.1
	- Added agent signer to log document
	- Added designer version to document
Rev 4.0 11
	- Don't flood the console. Debug/verbose msg are ignored / max linies = 100
%ENDREM

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Public Class AgentLog As AbstractLog
Declare Public Class AgentInfo 
Declare Public Class AgentSchedule As AbstractObject

'++LotusScript Development Environment:2:5:(Declarations):0:10
Private Const VERSION = "6.14.1"

'# AGENT LOG ###################################################################################################     
Private Const DBLOG_NOTFOUND = "Can't find the log database - program terminated: %1" '%1=Source name (agent or database)
Private Const DBLOG_AGENT_TERMINATED = "Illegal agent temination."'AgentLog

Public Class AgentLog As AbstractLog
'####################################################################################################     
	
	'source info
	Private sourceDb As NotesDatabase         	'Source database (from where the script is executed)
	Private sourceAgent As NotesAgent 			'the CurrentAgent
	
	'destination info (the agent log database and document)
	Private logDb As NotesDatabase				'The agent log database
	Private logDoc As NotesDocument	'The log document.
	Private logItem As NotesRichTextItem 'the item
	
     'Logging initialized by
	Private username As NotesName 
	
	'Statistics
	Private sessionStartTime As NotesDatetime			'Start time for logging
	Private startTicks As Long
	Private currentTicks As Long
	Private msTicks As Long
	
	'Indent
	Private indent As Integer
	
	'The Notes agent log
	Private l As NotesLog
	Private consoleCnt As Integer 
	
	'The agent document
	Private agentDoc As NotesDocument
	Private agentSchedule As AgentSchedule
	Private agentInfo As AgentInfo
	
	Sub New( logDb As NotesDatabase ) 
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Set Me.logDb = logDb
		
		'init counters
		'public const LSI_THREAD_TICKS=6
		startTicks = Getthreadinfo( 6 )
		currentTicks = startTicks
		'public const LSI_THREAD_TICKS_PER_SEC=7
		msTicks = Getthreadinfo( 7 )
		If msTicks = 0 Then msTicks = 1000
		
		isOpen = False
		
		'source initialisation
		Set username = New Notesname ( session.Username )
		Set sessionStartTime = New NotesDateTime( "" )
		Call sessionStartTime.setnow()
		Set sourceDb = session.currentDatabase
		Set sourceAgent = session.currentAgent
		
		If Not session.CurrentAgent Is Nothing Then
			Set l = New NotesLog( "AgentLog" )
			Call l.OpenAgentLog()
		End If
		
		Call getAgentDocument() 'create an agent document
		Call getDefaults()
		
		Call Me.open( logDb ) 'create a log document
		
		Call Me.logAction( LOG_DEBUG, "Agent log initialization", Nothing )
		
		Call updateAgentDocument() 
		
		Call Me.logAction( LOG_DEBUG, "Agent log is ready", Nothing )
	End Sub 'New
	
	Private Function getDefaults()
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		If agentDoc Is Nothing Then Exit Function
		
		If agentDoc.logSeverity( 0 ) = "" Then
			Me.severity = LOG_NORMAL
		Else
			Me.severity = Cint( agentDoc.logSeverity( 0 ))
		End If
		
		If agentDoc.logMode( 0 ) = "" Then
			Me.mode = "ON"
		Else
			Me.mode = agentDoc.logMode( 0 )
		End If
		
		console = (agentDoc.logConsole( 0 ) = "1")
		ui = (agentDoc.logUI( 0 ) = "1")
	End Function
	
	Function getAgentDocument() As NotesDocument
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		If agentDoc Is Nothing Then
			If sourceAgent Is Nothing Then Exit Function
			If logDb Is Nothing Then Exit Function
			If Not logdb.isopen Then Exit Function
			If sourceDb Is Nothing Then Exit Function
			
			Dim view As NotesView
			Dim id As String
			Dim isNew As Boolean
			
			Set agentSchedule = New AgentSchedule( sourceDb )
			Set agentInfo = agentSchedule.getAgentInfo( sourceAgent )
			
			Dim server As New NotesName( sourceDb.server ) 'session.username )
			id = agentinfo.note.universalId & "#" & server.Common
			
			Set view = logDb.GetView( "lookupAgentsById" )
			If view Is Nothing Then Exit Function
			
			'id lookup fixed (agents can have the same unid across databases)
			Dim id2 As String
			id2 = agentinfo.note.universalId & "." & sourceDb.replicaid & "." & UCase( server.Common )
			
			Set agentDoc = view.Getdocumentbykey( id2, True )
			
			If agentDoc Is Nothing Then
				If Not session.Isonserver Then Exit Function 'don't create when running local
			
				Set agentDoc = logDb.CreateDocument
				agentDoc.form = "Agent"
				agentDoc.id = id
				agentDoc.id2 = id2
				
				agentDoc.logMode = "ON"
				agentDoc.logSeverity = "5"
				
				agentDoc.createdBy = session.username
				
				agentDoc.sendScheduleError = "1"
				agentDoc.sendLogError = "1"
				agentDoc.sendSeverity = "3"
				
				agentDoc.notesBuildVersion = session.NotesBuildVersion
				agentDoc.NotesVersion = session.Notesversion
				agentDoc.platform = session.Platform
				
				Call agentDoc.ReplaceItemValue( "$ConflictAction", "3" ) 
				Call agentDoc.ReplaceItemValue( "$PublicAccess", "1" ) 
				
				agentDoc.updateInfo = "1"
				
				Call agentDoc.Save( True, False )
				Call view.Refresh()
			Else
				agentdoc.id2 = id2
			End If
		End If
		
		Set getAgentDocument = agentDoc
	End Function
	
	Function updateAgentDocument()
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		If agentDoc Is Nothing Then Exit Function
		
		If Format( agentDoc.agentModifiedDate( 0 ), "yymmddhhnn" ) = Format( agentinfo.note.Lastmodified, "yymmddhhnn" ) Then
			Goto DXLDONE 'DXL is uptodate
		End If
		
		'<Read Agent DXL>
		Call Me.logAction( LOG_DEBUG, parseParams( Now & " Reading agent DXL. Agent date: %1 (%3), Last date: %2 (%4)", agentDoc.agentModifiedDate( 0 ), agentinfo.note.Lastmodified, agentDoc.noteId, agentInfo.note.noteId ), agentdoc )
		agentDoc.agentModifiedDate = agentinfo.note.Lastmodified
		agentDoc.DXLRead = Now
		Call agentDoc.save( True, False )
		Call agentSchedule.getDXL()
		
		agentDoc.viewIcon = 163
		agentDoc.target = agentinfo.searchtype
		agentdoc.interval = Replace( Ucase( Left( agentinfo.intervalType, 1 )), "B", "H" )
		agentdoc.starttime = agentinfo.starttime
		agentdoc.endtime = agentinfo.endtime
		agentdoc.intervaltime = agentinfo.interval
		agentdoc.time1 = agentinfo.time1
		agentdoc.time2 = agentinfo.time2
		If agentinfo.onweekends Then
			agentdoc.weekends = "1"
		Else
			agentdoc.weekends = "0"
		End If
		agentdoc.location= agentinfo.runlocation
		agentdoc.machineName = agentinfo.note.getItemValue ( "$MachineName" )
		agentdoc.restrictions = agentinfo.restrictions
		
		agentdoc.scheduleInfo = agentinfo.scheduleInfo
		
		If Not agentinfo.runserver Is Nothing Then
			agentDoc.servername = agentinfo.runserver.abbreviated
		End If
		agentdoc.designerversion = agentinfo.designerversion
		
		Call Me.logAction( LOG_DEBUG, "Agent document updated with scheduling info extracted from DXL", agentDoc )
		'</Read Agent DXL>		
		
DXLDONE:
		agentDoc.dbTitle = sourceDb.Title
		agentDoc.agentName = agentInfo.agentName
		agentDoc.subject = agentDoc.agentName( 0 ) & " (" & sourceDb.Title & ")"
		agentDoc.server = sourceDb.Server
		agentDoc.filepath = sourceDb.FilePath
		agentDoc.replicaId = sourceDb.ReplicaID
		agentDoc.trigger = agentinfo.trigger
		agentdoc.designTemplateName = sourceDb.Designtemplatename
		
		agentDoc.agentSigner = agentinfo.signer.Abbreviated
		agentDoc.onBehalfOf = agentinfo.onBehalfOf.Abbreviated
		agentDoc.owner = agentinfo.owner.abbreviated
		
		agentDoc.lastRun = Now
		agentDoc.agentsize = agentinfo.note.size
		agentDoc.agentModifiedDate = agentinfo.note.Lastmodified
		
		agentdoc.lastMsg = ""
		agentdoc.lastStatus = ""
		agentDoc.lastSeverity = ""
		
		'create links
		Dim prevlog As NotesDocument
		On Error Resume Next
		Set prevlog = logDb.getDocumentByUnid( agentdoc.lastLogUnid( 0 ))
		agentdoc.lastLogUnid = logdoc.UniversalID
		
		If prevlog Is Nothing Then Goto DONE
		If prevlog.IsDeleted Then Goto DONE
		If Not prevlog.IsValid Then Goto DONE
		
		prevlog.nextLogUnid = logdoc.UniversalID
		Call prevlog.Save( True, False )
		
		logdoc.prevLogUnid = prevlog.UniversalID
DONE:
		Call agentDoc.Save( True, False )
		
	End Function
	
	Public Function open( logDb As NotesDatabase ) As Boolean
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		'the destination agent log database
		Set Me.logDb = logDb
		If logDb Is Nothing Then
			If l Is Nothing Then
				Print "Log database is missing" 
			Else
				Call l.LogAction( "ERROR - Log database not found" )
			End If
			isOpen = False
			Exit Function
		End If
		
		'set styles / defaults
		indent = 0
		'level = LOG_NORMAL + LOG_VERBOSE + LOG_DEBUG + LOG_WARNING + LOG_FATAL
		
		'create the log document with some basic information
		If Me.mode = "ON" Then
			isOpen = createLogDocument( ) 		
		Else
			isOpen = False
		End If
		Me.open = isOpen		
		
	End Function
	
	
%REM
Creates a new log document in the database	
%END REM
	Private Function createLogDocument() As Boolean
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		If logDb Is Nothing Then createLogDocument = False : Exit Function
		If Not logDb.IsOpen Then createLogDocument = False : Exit Function
		
		Dim n As NotesName
		Dim item As NotesItem
		
		'<reuse old log documents>
		'Dim t As variant
		't = timer
		Dim view As NotesView
		Dim viewNav As NotesViewNavigator
		Dim viewEntry As NotesViewEntry
		Dim coll As NotesDocumentCollection
		If Not agentDoc Is Nothing then
			Set view = logdb.Getview("(lookupLogsByMonitorUnid)")
			Set viewNav = view.CreateViewNavFromCategory( agentdoc.Universalid )
			If viewNav.Count > 20 Then
				Set viewEntry = viewNav.Getlast()
				Set logdoc = viewEntry.document
				While logdoc.Hasitem("Events") 
					Call logdoc.Removeitem("Events")	
				Wend

				'clear old fields
				Call logdoc.Removeitem("A$ERRMSG")
				Call logdoc.Removeitem("msg") 
				Call logdoc.Removeitem("severity")
				Call logdoc.Removeitem("errormsg")
			End If
		End If
		
		'</reuse old log documents>
		
		If logDoc Is Nothing Then Set logDoc = logDb.createDocument()
		With logDoc
			.form = "Log Entry"
			.logVersion = VERSION
			Call .replaceItemValue( "$PublicAccess", "1" )
			
			If Not agentDoc Is Nothing Then
				.monitorUnid = agentDoc.UniversalID
			End If
			
			'server name
			If sourceDb.server = "" Then                                  'Local=Username, Server=Servername
				.dbServer = session.username
			Else
				.dbServer = sourceDb.server
			End If
			
			'database info
			.dbPath = sourceDb.filePath
			.dbTitle = sourceDb.title
			
			'user info
			Set item = .replaceItemValue( "author", session.EffectiveUserName )
			item.IsAuthors = True
			
			.initUser = username.abbreviated
			
			'agent info
			If Not sourceAgent Is Nothing Then
				.type = "Agent"
				.agent = sourceAgent.Name
				.initName = sourceAgent.Name
			Else
				.type = "Standard"
				.initName = username.abbreviated
			End If
			
			'stats
			.sessionStartTime = sessionStartTime.LSLocalTime
			
			If sourceAgent Is Nothing Then
				.agentName = username.abbreviated
			Else
				.agentName = sourceAgent.Name
				Call .ReplaceItemValue( "A$PROGNAME", sourceDb.Title & "\\" & sourceAgent.Name )
			End If
			Call .ReplaceItemValue( "A$LOGTIME", Now )
			Call .ReplaceItemValue( "A$LOGUSER", session.username )
			.subject = "Log document: " & .agentName( 0 ) & " (" & sourceDb.Title & ")"
			
		'ViewCategory + viewDescription
			Set n = New NotesName( sourceDb.server )
			.viewCategory = sourceDb.Title & " (" & n.abbreviated & ")" & "\" & .agentName( 0 )
			.viewDescription = Now() & " - " & .type( 0 ) 
			
			.status = "0"
			.agentStart = sessionStartTime.LSLocalTime
			
			If Not sourceAgent Is Nothing Then
				.agentComment = sourceAgent.Comment
				.agentOwner = sourceAgent.Owner
				.agentServer = sourceAgent.Servername
				.agentDbTitle = sourceAgent.Parent.Title
				.agentDbServer = sourceAgent.Parent.Server
				.agentDbFilepath = sourceAgent.Parent.Filepath
				If Isdate( sourceAgent.lastRun )  Then
					.agentLastRun = sourceAgent.LastRun
				End If
				
				'get the design element
				Dim url As String
				Dim unid As String
				Dim note As NotesDocument
				url = sourceAgent.Notesurl
				unid = StrRightBack( StrLeft( url, "?" ), "/" )
				Set note = sourceAgent.parent.Getdocumentbyunid( unid )
				.agentSigner = note.GetItemValue( "$updatedBy" )
				.agentSigner = .agentSigner( UBound( .agentSigner ))
				.designerVersion = note.GetItemValue( "$DesignerVersion" )
				
				%REM NotesNoteCollection is too slow
				Dim notecoll As NotesNoteCollection
				Dim noteid As String
				Dim note As NotesDocument
				Set notecoll = sourceDb.CreateNoteCollection( False )
				notecoll.SelectAgents = True
				notecoll.BuildCollection
				
				noteid = notecoll.GetFirstNoteId
				Do Until noteid = "" 
					On Error Resume Next
					Set note = sourcedb.GetDocumentByID( noteid )
					On Error Goto 0
					If Not note Is Nothing Then
						If note.GetItemValue( "$title" )( 0 ) = sourceAgent.Name Then
							.agentSigner = note.GetItemValue( "$updatedBy" )
							.agentSigner = .agentSigner( Ubound( .agentSigner ))
							.designerVersion = note.GetItemValue( "$DesignerVersion" )
							Exit Do
						End If
					End If
					noteid = notecoll.GetNextNoteId( noteid )
				Loop
				%ENDREM
				
			End If
			
			'public const LSI_THREAD_VERSION=3
			.lsVersion = Getthreadinfo( 3 )
			
			'create the richText item
			Set logItem = .createRichTextItem( "events" )
			
			'enable automatical cleanup
			.cleanup = n.common & "." & .dbTitle( 0 ) & "." & .agentName( 0 )
			
			'save the new log document
			createLogDocument = save()
		End With
	End Function 'CreateLogDocument
	
	
'GET HANDLES TO MANUAL CONTROL
	Public Property Get document As NotesDocument	
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Set document = logDoc
	End Property 
	
	Public Property Get item() As NotesRichTextItem
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Set item = logItem
	End Property
	
	Public Function appendStyle( color As Integer, underline As Integer, bold As Integer, italic As Integer ) 
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		If isOpen Then
			Dim style As NotesRichTextStyle		
			Set style = session.createRichTextStyle
			
			With style
				.Underline = underline
				.Italic = italic
				.bold = bold
				.NotesColor = color
				.NotesFont = FONT_HELV
				.FontSize = 8
			End With
			
			Call logItem.AppendStyle( style )
		End If
	End Function 'setStyle	
	
	Public Function setIndent( idx As Integer )
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		indent = idx
	End Function
	
	Private Function incIndent()
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		indent = indent+1
	End Function
	
	Private Function decIndent()
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		indent = indent-1
	End Function
	
	
%REM
Indents the text according to the current indent setting (prints spaces)
%END REM
	Public Function addIndent()
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Const indentLine = "                                                                                                                                       "
		Const indentSize = 5
		
		If isOpen Then
			Call logItem.AppendText( Left( indentLine, indent * indentSize ))
		End If
	End Function
	
	
	Public Function logAction( severity As Integer, msg As String, link As Variant )
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		'Call AbstractLog..logAction( severity, msg, link ) 'log to console?
		If severity <= Me.severity And console Then 
			If severity <= LOG_NORMAL And consoleCnt<100 Then 'don't flood the log (max 64k)
				consoleCnt = consoleCnt+1
				If Not l Is Nothing Then Call l.LogAction( msg ) 
			End If
		End If
		
		If severity <= Me.severity Then
			If Not isOpen And mode="OPTIONAL" Then isOpen = createLogDocument()
			
			If isOpen Then
				Select Case severity
				Case LOG_NORMAL:
					Call setIndent( 1 )
					Call AppendStyle( COLOR_BLACK, False, False, False ) 
				Case LOG_VERBOSE:
					Call setIndent( 2 )
					Call appendStyle( COLOR_DARK_BLUE, False, False, False ) 
				Case LOG_DEBUG:
					Call setIndent( 3 )
					Call appendStyle( COLOR_DARK_GREEN, False, False, False ) 
				Case LOG_WARNING_HIGH, LOG_WARNING_LOW:
					Call setIndent( 0 )
					Call appendStyle( COLOR_DARK_RED, False, False, False ) 
				Case LOG_FATAL:
					Call setIndent( 0 )
					Call appendStyle( COLOR_DARK_RED, False, True, False ) 
				End Select
				
		'add the message to the log document (the event richtext field)
				With logItem
					If Me.severity >= LOG_DEBUG Then
						'public const LSI_THREAD_TICKS=6
						Call .appendText( Format(( Getthreadinfo( 6 )-startTicks ), "000000" ) & ":" )
						Call .appendText( Format(( Getthreadinfo( 6 )-currentTicks ), "000000" ) & " " )
						currentTicks = Getthreadinfo( 6 )
					End If
					Call addIndent()
					Call .appendText( msg )
					
			'add a link?
					If Isobject( link ) Then
						If Not link Is Nothing Then
							Call .appendText( " " )
							On Error Resume Next
							Call .appendDoclink( link, getLinkComment( link ))
							On Error Goto 0
						End If
					End If
					
					Call .addNewline( 1, true )
					
				End With
				
				
		'Use the highest severity as the documents severity
				With logDoc
					If Isnumeric( .severity( 0 )) Then
						If severity <= .severity( 0 ) Then
							.severity = severity
							.msg = msg
							If severity < LOG_NORMAL Then
								Call .ReplaceItemValue( "A$LOGTYPE", "Error" )
								Call .ReplaceItemValue( "A$ERRMSG", msg )
							Else
								Call .ReplaceItemValue( "A$LOGTYPE", "Action" )
								Call .ReplaceItemValue( "A$ACTION", msg )
							End If
						End If
					Else
						.severity = severity
						.msg = msg
						If severity < LOG_NORMAL Then
							Call .ReplaceItemValue( "A$LOGTYPE", "Error" )
							Call .ReplaceItemValue( "A$ERRMSG", msg )
						Else
							Call .ReplaceItemValue( "A$LOGTYPE", "Action" )
							Call .ReplaceItemValue( "A$ACTION", msg )
						End If
					End If
				End With
				
				If me.severity = LOG_DEBUG Then Call save()
				
			End If
		End If
	End Function
	
	Public Function close()
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Dim executionTime As Long
		Dim endTime As New NotesDateTime( "" )
		Call endTime.SetNow()
		
		If isOpen Then 
			executionTime = endTime.TimeDifference( sessionStartTime )
			
			With logDoc
				.status = "1"
				.agentEnd = endTime.LsLocalTime
				.agentExecutionTimeSec = executionTime Mod 60
				.agentExecutionTimeMin = Int( executionTime / 60 ) Mod 60
				.agentExecutionTimeHours = Int( executionTime / (60*60) )
				
				Call save()
			End With
		End If
		isOpen = False
		
		If Not l Is Nothing Then Call l.Close()
	End Function 'close
	
	Public Function save() As Boolean
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		If Not logDoc Is Nothing Then
			save = logDoc.Save( True, False )
		Else
			save = False
		End If
	End Function
	
	Sub Delete
'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		On Error Resume next
		If isOpen Then
			Call Me.close()
			
			With logDoc
				.status = "3"
				
				If Err = 0 Then
					.errorMsg = DBLOG_AGENT_TERMINATED & " " & Error$ 
				Else
					.errorMsg = "#" & Err & " - " & Error$ & " (in line " & Erl & ")"
				End If
				.msg = .errorMsg 
				
				Const LSI_THREAD_LINE=0
				Const LSI_THREAD_PROC=1
				Const LSI_THREAD_MODULE=2
				Const LSI_THREAD_VERSION=3
				Const LSI_THREAD_LANGUAGE=4
				Const LSI_THREAD_COUNTRY=5
				Const LSI_THREAD_TICKS=6
				Const LSI_THREAD_TICKS_PER_SEC=7
				Const LSI_THREAD_PROCESS_ID=8
				Const LSI_THREAD_TASK_ID=9
				Const LSI_THREAD_CALLPROC=10
				Const LSI_THREAD_CALLMODULE=11
				
				.msg = .msg( 0 ) & Chr( 10 ) & "Calling Procedure: " & Getthreadinfo( LSI_THREAD_CALLPROC )
				.msg = .msg( 0 ) & Chr( 10 ) & "Calling Module: " & Getthreadinfo( LSI_THREAD_CALLMODULE )
				.msg = .msg( 0 ) & Chr( 10 ) & "Version: " & Getthreadinfo( LSI_THREAD_VERSION )
				.msg = .msg( 0 ) & Chr( 10 ) & "Module: " & Getthreadinfo( LSI_THREAD_MODULE )
				.msg = .msg( 0 ) & Chr( 10 ) & "Procedure: " & Getthreadinfo( LSI_THREAD_PROC)
				
				.errorMsg = .msg
				Call save()
				
				If Not agentdoc Is Nothing then 
					agentdoc.lastMsg = .msg
					agentdoc.lastStatus = .status
					agentDoc.lastSeverity = .severity
					Call agentdoc.save( True, False )
				End If
			End With 
			
	
		End If
		

	End Sub
	
End Class 


Public Class AgentInfo 
	'############################################################################
	
	Sub new
		'-------------------------------------------------------------------------------------------------------------------------------	
	End Sub
	
	'the basic
	Public agentname As String
	Public agent As NotesAgent
	Public note As NotesDocument
	Public owner As NotesName
	Public onBehalfOf As NotesName
	Public trigger As String 'plain text trigger (conversion of the agent.trigger)
	Public comment As String
	
	'details
	Public designerVersion As String
	
	'database
	Public db As NotesDatabase
	
	'dxl
	Public signer As NotesName
	Public restrictions As String
	Public intervalType As String 'never, byminutes, daily, weekly, monthly
	Public searchType As String 'all, selected, ...
	Public interval As Integer 'in minutes for 'byminutes' type
	Public starttime As Variant 'agent is active between the starttime and endtime
	Public endtime As Variant
	
	Public Time1 As Variant ' Start time (date/time)
	Public Time2 As Variant ' Long (weekday or day of month) or end time (date/time)
	
	Public onweekends As Boolean
	Public runlocation As String
	Public runserver As NotesName
	
	'rundata
	Public exitcode As String
	Public runlog As String
	
	Public dxl As String
	
	Public Function scheduleInfo() As String
		'-------------------------------------------------------------------------------------------------------------------------------	
		Dim s As String
		Select Case agent.Trigger
			
		Case TRIGGER_SCHEDULED:
			If Not agent.IsEnabled Then
				s = "Disabled"
			Else
				Select Case intervalType
				Case "never":
					s = "Never"
					
				Case "byminutes":
					s = "Every " & interval & " minutes"
					
					If time1 <> "" Then
						s = s & " between " & Format( time1, "hh:nn" ) & " and " & Format( time2, "hh:nn" )
					End If
					
				Case "daily":
					s = "Daily at " & Format( time1, "hh:nn" )
					
				Case "weekly":
					s = "Weekly on " & time2 & " at " & Format( time1, "hh:nn" )
					
				Case "monthly"
					s = "Monthly on the " & time2 & ". at " & Format( time1, "hh:nn" )
					
				End Select
				
			End If
			
		Case Else
			s = trigger
			
		End Select
		
		scheduleInfo = s
	End Function
	
	Public Function toString() As String
		'-------------------------------------------------------------------------------------------------------------------------------	
		Dim s As String
		s = "Agentname: " & Chr( 9 ) & agentname 
		If comment <> "" Then s = s & " (" & comment & ")"
		s = s & Chr( 10 ) & "Trigger: " & Chr( 9 ) & trigger
		s = s & Chr( 10 ) & "Search: " & Chr( 9 ) & searchtype
		s = s & Chr( 10 ) & "Owner/Signer: " & Chr( 9 )
		If owner.Common = signer.Common Then s = s & owner.Abbreviated Else s = s & owner.Abbreviated & "/" & signer.Abbreviated
		If onBehalfOf.Common <> "" Then.s = s & Chr( 10 ) & "On behalf on: " & Chr( 9 ) & onBehalfOf.Abbreviated
		
		If agent.trigger = TRIGGER_SCHEDULED Then
			s = s & Chr( 10 ) & "Enabled: " & Chr( 9 ) & agent.IsEnabled	
			s = s & Chr( 10 ) & "Interval type: " & Chr( 9 ) & intervaltype
			s = s & Chr( 10 ) & "Interval: " & Chr( 9 ) & interval
			If starttime <> "" Then
				s = s & Chr( 10 ) & "Active from: " & Chr( 9 ) & starttime & " to " & endtime
			End If
			s = s & Chr( 10 ) & "Start time: " & Chr( 9 ) & time1
			s = s & Chr( 10 ) & "Time 2: " & Chr( 9 ) & time2
			s = s & Chr( 10 ) & "Weekend: " & Chr( 9 ) & onweekends
			s = s & Chr( 10 ) & "Server/Location: " & Chr( 9 ) & runserver.Common & "/" & runlocation
		End If
		
		If Cstr( agent.LastRun ) = "00:00:00" Then
			s = s & Chr( 10 ) & "Last run: " & Chr( 9 ) & "Never"
		Else
			s = s & Chr( 10 ) & "Last run: " & Chr( 9 ) & agent.LastRun
			s = s & Chr( 10 ) & "Exitcode: " & Chr( 9 ) & exitcode
		End If
		
		s = s & Chr( 10 ) & "Designer version: " & Chr( 9 ) & designerversion		
		s = s & Chr( 10 ) & "Restrictions: " & Chr( 9 ) & restrictions
		If Not agent.IsPublic Then s = s & Chr( 10 ) & "PRIVATE"
		
		toString = s
	End Function
	
End Class

Public Class AgentSchedule As AbstractObject
'############################################################################
	Private db As NotesDatabase
	Private agent As NotesAgent
	Private agentNote As NotesDocument
	Private agentname As String
	
	Private agentInfo As AgentInfo
	
	Sub new( db As NotesDatabase )
	'-------------------------------------------------------------------------------------------------------------------------------	
		Set Me.db = db		
	End Sub
	
	Public Function getAgentInfo( source As Variant ) As AgentInfo
	'-------------------------------------------------------------------------------------------------------------------------------	
		Set agentInfo = New AgentInfo()
		Select Case Typename( source )
		Case "STRING"
			Call setAgentname( Cstr( source ))
			Set agent = db.GetAgent( agentname )
			Call setNote()
			
		Case "NOTESAGENT"
			Set agent = source
			Call setAgentName( agent.Name )
			Call setNote()
			
		Case "NOTESDOCUMENT"
			Set agentNote = source
			Call setAgentname( agentNote.GetItemValue( "$Title" )( 0 ))
			Set agent = db.GetAgent( agentname )
			
		End Select
		
		Call setAgentInfo()
		'Call setDXL()
		
		Set getAgentInfo = agentinfo
	End Function
	
	Private Function setAgentInfo( )
	'-------------------------------------------------------------------------------------------------------------------------------	
		With agentinfo
			.agentname = agentname
			Set .agent = agent
			Set .note = agentnote
			Set .owner = New NotesName( agent.Owner )
			Set .onBehalfOf = New NotesName( agent.OnBehalfOf )
			If agentnote Is Nothing Then
				Set .signer = New NotesName( "" )
			else
				Set .signer = New NotesName( agentnote.signer )
			End if
			Select Case agent.Trigger
			Case TRIGGER_NONE: .trigger = "None"
			Case TRIGGER_SCHEDULED: .trigger = "Scheduled"
			Case TRIGGER_AFTER_MAIL_DELIVERY: .trigger = "After new mail has arrived"
			Case TRIGGER_BEFORE_MAIL_DELIVERY: .trigger = "Before new mail arrives"
			Case TRIGGER_DOC_PASTED: .trigger = "When documents are pasted"
			Case TRIGGER_DOC_UPDATE: .trigger = "After documents are created or modified"
			Case TRIGGER_MANUAL: .trigger = "Action menu selection/Agent list selection"
			End Select
			
			.designerVersion = agentNote.GetItemValue( "$DesignerVersion" )( 0 )
'			.restricted = agentNote.GetItemValue( "$Restricted" )( 0 )
			
			Set .db = db
		End With
	End Function
	
	Public Function getDXL() As AgentInfo
	'-------------------------------------------------------------------------------------------------------------------------------	
		Call setDXL
		Set getDXL = agentinfo
	End Function
	
	Private Function setDXL()
	'-------------------------------------------------------------------------------------------------------------------------------	
		'DXL
		Dim dxl As NotesDXLExporter
		Dim dom As NotesDOMParser
		Dim root As NotesDOMDocumentNode
		
		Set dxl = session.CreateDXLExporter( agentNote )
		Set dom = session.CreateDOMParser( dxl )
		
		On Error Goto DXLERROR
		Call dxl.process
		
		Set root = dom.Document()
		
		'get the dxl
		Dim tempDoc As NotesDocument
		Set tempDoc = db.CreateDocument
		Dim rti As NotesRichTextItem
		Set rti = tempDoc.CreateRichTextItem( "xml" )
		Call dom.setoutput( rti )
		Call dom.Serialize()
		agentinfo.dxl = rti.text
		
		Dim nodelist As NotesDOMNodeList
		Set nodelist = root.GetElementsByTagName( "agent" )
		If nodelist.NumberOfEntries > 0 Then
			Call processDOMAgent( nodelist.GetItem( 1 ))
		End If
		
DONE:
		Exit Function
DXLERROR:
		If InStr( 1, dxl.log, "<error id='6968'>", 5 ) > 0 Then Resume DONE
		If InStr( 1, dxl.log, "<error id='6981'>", 5 ) > 0 Then Resume DONE
		
		Call logAction( LOG_WARNING_HIGH, parseParams( "DXL Failed: %1 '%2' in %4 (%3)", Err & " - " & Error, dxl.log, db.Server & "!!" & db.filepath, agent.Name  ), Nothing )
		Resume DONE
	End Function
	
	Private Function setAgentname( s As String )
	'-------------------------------------------------------------------------------------------------------------------------------	
		agentname = s
		If Instr( agentname, "|" ) > 0 Then agentname = Strleft( agentname, "|" )
	End Function
	
	Private Function setNote()
	'-------------------------------------------------------------------------------------------------------------------------------	
		'get the design note for the current agent
		
		Dim url As String
		Dim unid As String
		url = agent.Notesurl
		unid = StrRightBack( StrLeft( url, "?" ), "/" )
		Set agentNote = db.Getdocumentbyunid( unid )
		
		%REM
		Dim noteColl As NotesNoteCollection
		Dim note As NotesDocument
		Set noteColl = db.CreateNoteCollection( False )
		noteColl.SelectAgents = True
		Call noteColl.BuildCollection
		Call noteColl.Intersect( agent )
		
		Set agentnote = db.GetDocumentByID( noteColl.GetFirstNoteId )
		%ENDREM
	End Function
	
	Private Function processDOMAgent( e As NotesDomNode )
	'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Dim agentDOM As NotesDOMElementNode		
		Dim trigger As NotesDOMElementNode
		Dim schedule As NotesDOMElementNode
		Dim nodeMap As NotesDOMNamedNodeMap
		Dim node As NotesDOMElementNode
		
		If e.IsNull Then Exit Function
		Set agentDOM = e
		
		agentinfo.restrictions = agentDOM.GetAttribute( "restrictions" )
		agentinfo.comment = agentDOM.GetAttribute( "comment" )
		
		Set trigger = getElement( agentDOM, "trigger" )
		If  trigger.isNull Then Exit Function
		'agentinfo.dxltriggerType = trigger.GetAttribute( "type" )
		
		'signer
		Set node = getElement( agentDOM, "wassignedby" )
		If Not node Is Nothing Then
			Set node = getElement( node, "name" )
			If Not node Is Nothing Then
				Set agentinfo.signer = New NotesName( node.firstChild.nodeValue )
			End If
		End If
		
		'run data
		Set node = getElement( agentDOM, "rundata" )
		If Not node Is Nothing Then	
			agentinfo.exitcode =  node.GetAttribute( "exitcode" )
			Set node = getElement( node, "runlog" )
			If Not node Is Nothing Then agentinfo.runlog =  node.firstChild.nodeValue
		End If
		
		'searchtype
		Set node = getElement( agentDOM, "documentset" )
		If Not node Is Nothing Then agentinfo.searchType = node.GetAttribute( "type" )
		
		'intevalType: ' never, byminutes, daily, weekly, monthly
		Select Case trigger.getAttribute( "type" )
		Case "never":
			agentInfo.intervalType = "never"
			
		Case "scheduled":
			Set schedule = getElement( trigger, "schedule" )
			agentInfo.intervalType = schedule.GetAttribute( "type" )
			
			Set node = getElement( schedule, "starttime" )
			If Not node Is Nothing Then
				agentinfo.time1 = cTime( getTime( node ))
			End If
			
			Set node = getElement( schedule, "endtime" )
			If Not node Is Nothing Then
				agentinfo.time2 = cTIme( getTime( node ))
			End If
			
			Set node = getElement( schedule, "startdate" )
			If Not node Is Nothing Then
				agentinfo.starttime = cdate( getTime( node ))
			End If
			
			Set node = getElement( schedule, "enddate" )
			If Not node Is Nothing Then
				agentinfo.endtime = cdate( getTime( node ))
			End If
			
			agentinfo.onweekends = cBoolean( schedule.GetAttribute( "onweekends" ))
			agentinfo.runlocation = schedule.GetAttribute( "runlocation" )
			Set agentinfo.runserver = New NotesName( schedule.GetAttribute( "runserver" ))
		End Select		
		
		Select Case agentinfo.intervalType
			
		Case "byminutes":
			agentinfo.interval = Cint( schedule.GetAttribute( "minutes" )) + Cint( schedule.GetAttribute( "hours" )) * 60
			
		Case "daily":
			
		Case "weekly":
			agentinfo.Time2 = schedule.GetAttribute( "dayofweek" )
			
		Case "monthly":
			agentinfo.Time2 = schedule.GetAttribute( "dateinmonth" )
			
		End Select
		
	End Function
	
	Private Function getElement( root As NotesDOMElementNode, elementName As String ) As NotesDOMElementNode 
	'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Dim nodelist As NotesDOMNodeList
		Set nodelist = root.GetElementsByTagName( elementName )
		If nodelist.NumberOfEntries > 0 Then
			Set getElement = nodelist.GetItem( 1 )
		Else
			Set getElement = Nothing
		End If
		
	End Function
	
	Private Function getTime( e As NotesDOMElementNode ) As Variant
	'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Dim eDT As NotesDOMElementNode
		Dim dst As String
		Dim strDT As String
		
		Set eDT = getElement( e, "datetime" )
		If Not eDT.isNull Then
			dst = eDT.GetAttribute( "dst" )
			strDT = eDT.firstChild.nodeValue
			
			getTime = strDT
		End If
	End Function
	
	Private Function cBoolean( flag As Variant ) As Boolean
	'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Select Case Ucase( Cstr( flag )) 
		Case "1", "TRUE": cBoolean = True
		Case Else
			cBoolean = False
		End Select
	End Function
	
	Private Function cDate( t As String ) As Variant
	'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Dim y As String
		Dim m As String
		Dim d As String
		
		If t <> "" Then
			y = Mid( t, 1, 4 )
			m = Mid( t, 5, 2 )
			d = Mid( t, 7, 2 )
			cDate = Datenumber( Cint( y ), Cint( m ), Cint( d ))
		End If
	End Function
	
	Private Function cTime( t As String ) As Variant
	'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Dim h As String
		Dim m As String
		Dim s As String
		If t <> "" Then
			h = Mid( t, 2, 2 )
			m = Mid( t, 4, 2 )
			s = Mid( t, 6, 2 )
			cTime = Timenumber( Cint( h ), Cint( m ), Cint( s ))
		End If
	End Function
End Class