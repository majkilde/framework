'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Declare
Use "cls.fw.memo"



%REM
6.2 Fixed the pick method
5.6.2. Add a param to Function importAsResponse( parent As notesDocument, inheritFromParent As Variant  ) 
4.0.1 Added importMail class
%END REM  

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Public Class ImportMail As AbstractObject
Declare Public Class Memo As AbstractObject
Declare Public Class MemoUI As Memo

'++LotusScript Development Environment:2:5:(Declarations):0:10


Public Class ImportMail As AbstractObject
'#######################################################################################################
	Private ws As NotesUIWorkspace
	Private db As NotesDatabase
	
	Sub new()
	'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Set ws = New NotesUIWorkspace	
		Set Me.db = session.currentDatabase
	End Sub
	
	
	Function importAsResponse( parent As notesDocument, inheritFromParent As Variant ) As Boolean
	'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Dim coll As NotesDocumentCollection
		Dim doc As NotesDocument
		Dim mailDoc As NotesDocument
		
		importAsResponse = False
		
		Dim mailDb As New NotesDatabase( "","" )
		Call mailDb.OpenMail()
		
		If Not mailDb.IsOpen Then Print "Error - can't open the mail database" : End
		
		If parent Is Nothing Then
			If ws.CurrentDocument Is Nothing Then
				Set parent = session.DocumentContext 'selected in view
			Else
				Set parent = ws.CurrentDocument.Document 'current open document
			End If
		End If
		
		Set coll = ws.PickListCollection( PICKLIST_CUSTOM, True, mailDb.server,mailDb.filepath,"($All)","Import mail", "Select mail(s) to import" )
		
		Set mailDoc = coll.GetFirstDocument()
		Do Until mailDoc Is Nothing
			
			Set doc = mailDoc.CopyToDatabase( db )
			Call doc.MakeResponse( parent )
			
			If Isarray( inheritFromParent ) Then
				Forall fieldName In inheritFromParent
					If fieldname <> "" Then
						Call doc.ReplaceItemValue( fieldName, parent.GetItemValue( fieldName ))
					End If
				End Forall
			End If
			
			doc.form = "Memo"
			doc.imported = Now
			doc.importedBy = session.username
			
			Call doc.ComputeWithForm( False,False )
			Call doc.Save( True, False )
			
			Set mailDoc = coll.GetNextDocument( mailDoc )
		Loop	
		
		importAsResponse = True
	End Function
	
End Class

%REM
	You don't need this! (but it is used by the memoUI class)
	
	To create and send a new memo, do this
	
	 dim m as new AbstractMemo( "*", "<template name>" )
	 call m.create( sourceDocuument, nothing )
	 if not m.send() then
	 	print "No mail sent"
	 end if 
%END REM
Public Class Memo As AbstractObject
	'####################################################################################################	
	Private memo As AbstractMemo
	
	Sub New()
		'--------------------------------------------------------------------------------------------------------------------------
	End Sub
	
	%REM
Returns the current memo object
	%END REM
	Public Function getMemo() As AbstractMemo
		'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Set getMemo = memo
	End Function
	
	%REM
Returns the current mail document
	%END REM
	Public Function getDocument() As NotesDocument
		'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Set getDocument = getMemo.getDocument()		
	End Function
	
	%REM
Returns an empty memo template document - with default settings
	%END REM
	Public Function getDefaultTemplate() As NotesDocument
		'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		On Error GoTo eh
		
		Dim mt As New MemoTemplate
		Call mt.create( "*", LCase( session.createname( session.Username).Common ) & "-" & Format(Now, "yyyymmdd-hhmm"))
		Set getDefaultTemplate = mt.getDocument()
		
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function
	
	%REM
db - the template database (optional if template is a document - required if template is a string id)
template: template document or template id (string)
	%END REM
	Public Function setTemplate( db As variant, template As Variant ) As Boolean
		On Error GoTo eh
		
		Set memo = createMemo( db, template )
		setTemplate = True
		
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function 'getMemo
	
	Public Function insert( source As Variant )
		On Error GoTo eh
		Call memo.insert( source )
		
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function
	
	
	Public Function appendFile( filename As String )
		On Error GoTo eh
		Call memo.appendFile( filename )
		
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function
	
	Public Function create( sourceDoc As NotesDocument, sourceColl As NotesDocumentCollection ) As Boolean
		'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		'	If sourceDoc Is Nothing Then
		'		create = False
		'		Call setMessage( 0, "Source document is nothing" )
		'		Exit Function
		'	End If
		On Error GoTo eh
		If Not memo Is Nothing Then
			create = memo.create( sourceDoc, sourceColl )
		Else
			create = False
			Call pushMessage( "No template - please call setTemplate before calling create" )
		End If
		
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function
	
	Public Function process( ) As Boolean
		'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		If memo.send() Then
			Call pushMessage( "Mail sent to " & memo.getRecipientsCount() & " recipients" )
			process = True
		Else
			Call pushMessage( memo.getMessage())
			process = False
		End If
	End Function
	
	Public Function send( ) As Boolean
		'------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		send = process
	End Function
	
	
	Public Function sendDocument( doc As NotesDocument ) As Boolean
		On Error GoTo eh
		sendDocument = False
		
		If doc Is Nothing Then
			
			Call pushMessage( "No document" )
			Exit Function
		End If
		If doc.templateId( 0 ) = "" Then
			Call pushMessage( "No template id" )
			Exit Function
		End If
		
		If setTemplate( session.currentDatabase, doc.templateId( 0 )) Then
			Call memo.setDocument( doc )
			sendDocument = memo.send()
		End If
		
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function
End Class
Public Class MemoUI As Memo
	'#######################################################################################################
	Private ws As NotesUIWorkspace
	Private db As NotesDatabase
	
	Sub New()
		Set ws = New NotesUIWorkspace		
		Set db = session.currentDatabase
	End Sub
	
	Public Function pick( title As String, prompt As String, singleCategory As String ) As NotesDocument
		Const VIEWNAME = "pick.memoTemplate"
		
		Dim view As NotesView
		Dim viewNav As NotesViewNavigator
		Dim coll As NotesDocumentCollection
		
		
		Set view = CacheManager.getView( db, VIEWNAME )
		
		If singleCategory = "" Then
			Select Case view.Entrycount
			Case 0 : 
				Set pick = getDefaultTemplate()
				Exit Function
			Case 1: 
				Set pick = view.GetFirstDocument
				Exit Function
			End Select
		Else
			Set coll = view.Getalldocumentsbykey(singleCategory, True)
			Select Case coll.Count
			Case 0 : 
				Set pick = getDefaultTemplate()
				Exit Function
			Case 1: 
				Set pick = coll.GetFirstDocument
				Exit Function
			End Select
		End If
		
		Set coll = ws.PickListCollection( PICKLIST_CUSTOM, False, db.server, db.filepath, VIEWNAME, title, prompt, singleCategory )
		If coll.Count = 1 Then
			Set pick = coll.GetFirstDocument()
		Else
			Set pick = Nothing
		End If
	End Function
	
	
	Public Function process() As Boolean
		If memo.getUI() Then
			Call ws.EditDocument( True, memo.getDocument())
			process = True
		Else
			process = Memo..process()
		End If
	End Function
	
End Class