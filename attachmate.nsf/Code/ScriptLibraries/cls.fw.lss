'++LotusScript Development Environment:2:5:(Options):0:74
%REM
**************************************************************************************************************************'
COPYRIGHT 2003-2012 by MAJKILDE
**************************************************************************************************************************'
This library is programmed and owned by MAJKILDE Aps
Under the copyright laws, neither the documentation nor the software may be copied, photocopied, 
reproduced, translated, resold, or reduced to any electronic medium or machine-readable form, 
in whole or in part, without the prior written consent of MAJKILDE Aps, except in the manner described 
in the documentation or the applicable licensing agreement governing the use of the software.
**************************************************************************************************************************'
%ENDREM

Option Public
Option Declare
Use "cls.system"

%REM Revisions
6.6.11 majkilde 24.02.2012
- New method: KeywordDocument.updateProfile (copies values to the Setup profile)
- DbConfig.resolve fixed: There was a problem with the exception handling
6.6.10 majkilde 8-8-2011
- Fixed a problem with lookup view sorting (when using execptions)
6.2 majkilde 2.09.2010
- Updated to rev 6.2 af cls.system
6.0.1 majkilde 7.07.2010
- Fixed the mail server lookup - now works even when using local mail
6.0 majkilde 23.01.2010
- Added a SetConfigDb method
- first lookup in local admin.lookup
5.7.6 majkilde 26.8.09
- Some issues with the getHomeServer fixed
5.7.5 majkilde 19.08.09
- If the dbconfig is not on the local machine, then try on the mail server
5.3
- Locations removed
- Dont read mailserver from notes.ini (forcing agents to run unrestricted)
5.2
- Improved error handling
5.1
- Added a usage log (lotus script use only) to the dbconfig database
5.01
- Fix problem in the GetCofigDb (didn't recurse the path correct)
%END REM

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Public Class DbConfig As AbstractObject
Declare Public Class KeywordDocument As AbstractObject

'++LotusScript Development Environment:2:5:(Declarations):0:10
'#DB CONFIG #######################################################################################

Private Const ERROR_NO_CONFIG = "Can't locate configuration database"
Private Const ERROR_NO_CFG_DOCUMENT = "Can't locate configuration document for database %1" '%1=the database alias/id
Private Const ERROR_NO_VIEW = "Lookup view is missing"


Private Const CONFIG_FILENAME = "dbconfig.nsf"
Private Const CONFIG_VIEW = "admin.lookup" '"lookupDatabaseByID"
Private Const CONFIG_USAGE_VIEW = "lookupUsage"

Private Const FW_ERR_BASE = 5000
Public Const ERR_NO_CONFIG = FW_ERR_BASE+1
Public Const ERR_NO_CFG_DOCUMENT = FW_ERR_BASE+2'Config





'# KEYWORD DOCUMENT #######################################################################################
Private Const KEY_ITEM = "key"
Private Const VALUE_ITEM = "values"'KeywordDocument



Public Class DbConfig As AbstractObject
'########################################################################################
	
	Private configDb As NotesDatabase
	Private configView As NotesView
	Private usageView As NotesView
	
	Private applicationPath As String 'current path
	Private applicationServer As NotesName 'current server
	
	Private db As NotesDatabase 'the database (defaults to current db)
	
	Private isValid As Boolean
	
	Private mailServer As NotesName
	Private homeServer As NotesName
	
	Sub new()
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		'init and get the config database
		With session.CurrentDatabase
			Set applicationServer = New NotesName( .server )
			applicationPath = Strleftback( Replace( .filepath, "\", "/" ), "/" )
		End With
		Set db = session.currentDatabase
		
		Call getConfigDatabase()
		Call initConfig()
		
		isValid = True
	End Sub 'new
	
	Public Function setConfigDatabase( configDb As NotesDatabase )
		Set me.configDb = configDb
		Call initConfig()
	End Function
		
	%REM
		Function initConfig
		Description: Comments for Function
	%END REM
	Private Function initConfig()
		'get the lookup view
		If Not configDb Is Nothing Then
			Set configView = configDb.getView( CONFIG_VIEW )
			If configView Is Nothing Then Call Me.LogAction( LOG_WARNING_HIGH, ERROR_NO_VIEW, Nothing ) : Exit function
			
			Set usageView = configDb.GetView( CONFIG_USAGE_VIEW )
		End If
	End Function
	
%REM
Returns the current Config Database (dbconfig.nsf)
%END REM
	Public Function getConfigDatabase() As NotesDatabase
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		On Error Goto ERRORHANDLER
		Dim path As String
		Dim filename As String
		
		If Not configDb Is Nothing Then GoTo done
			path = applicationPath
			Do
				If path = "" Then 
					filename = CONFIG_FILENAME
				Else
					filename = path & "/" & CONFIG_FILENAME
				End If
				
				Set configDb = session.getDatabase( applicationServer.canonical, filename )
				If configDb.IsOpen Then	Goto DONE 'Config database found :-)
				
				
				If path = "" Then
				'not found - not event in the root
					Set configDb = Nothing
					If applicationServer.Common = "" Then
						Goto TRYONSERVER
					Else						
						Call Me.logAction( LOG_WARNING_LOW,  ERROR_NO_CONFIG, Nothing  )
						Exit Function
					End If			
				End If
				
				If Instr( path, "/" ) > 0 Then
					path = Strleftback( path, "/" )
				Else
					path = ""
				End If
			Loop
				
TRYONSERVER:
		Dim srv As NotesName
		Set configDb = session.getDatabase( getMailServer().common, CONFIG_FILENAME )
		If Not configDb.IsOpen Then
			On Error Resume next
			Set configDb = session.getDatabase( getHomeServer().common, CONFIG_FILENAME )
			If Not configDb.IsOpen Then			
				Set configDb = Nothing
				Call Me.logAction( LOG_WARNING_LOW,  ERROR_NO_CONFIG, Nothing  )
			End If
			On Error GoTo 0
		End If
DONE:
		Set getConfigDatabase = configDb
		
		Exit Function
ERRORHANDLER:
		Call Me.logAction( LOG_FATAL, parseParams( "Error in %4 : %1 %2 at line %3", Err, Error, Erl, Getthreadinfo( 1 )), Nothing )
		Resume DONE
	End Function 'getConfigDatabase
	
%REM
Returns the found server
%END REM
	Public Function server() As Notesname
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		If Not db Is Nothing Then
			Set server = New NotesName( db.Server )
		Else
			Set server = New NotesName( "" )
		End If
	End Function
	
%REM
Returns the found database path
%END REM
	Public Function path() As String
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		If Not db Is Nothing Then
			path = Replace( Replace( db.FilePath, " ", "+" ), "\", "/" )
		End If
	End Function 'getCurrentPath
	
%REM
Returns the current server
%END REM
	Public Function getCurrentServer() As Notesname
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Set getCurrentServer = applicationServer
	End Function
	
%REM
Returns the home server (from the location document)
%END REM
	Public Function getHomeServer() As NotesName
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	On Error GoTo eh
		Dim reg As New notesRegistration()
		Dim mailserver As String
		
		
		If homeServer Is Nothing Then
			Call reg.GetUserInfo( session.username, mailserver )
			Set homeServer = New NotesName( mailserver )
		End If
		
		Set getHomeServer = homeServer
		
done:
		Exit Function
eh:
		Error Err, getErrorInfo( "" )
	End Function
	
%REM
Returns the mail server (from the location document)
%END REM
	Public Function getMailServer() As NotesName
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		On Error Goto ERRORHANDLER
		
		Dim v As Variant
		v = Evaluate(|@LocationGetInfo([HomeServer])|)
		Set mailServer = New NotesName( v( 0 ))
		
		%REM
		If mailServer Is Nothing Then
			Dim maildb As New NotesDatabase( "", "" )
			Call maildb.OpenMail
			Set mailServer = New NotesName( maildb.Server )
		End If
		%ENDREM
		Set getMailServer = mailServer
		
DONE:
		Exit Function
ERRORHANDLER:
		Call Me.logAction( LOG_FATAL, parseParams( "Error in %4 : %1 %2 at line %3", Err, Error, Erl, Getthreadinfo( 1 )), Nothing )
		Resume DONE
	End Function
	
%REM
Returns true if the key exits in the dbconfig database
%END REM
	Public Function hasKey( key As String ) As Integer
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		On Error Goto ERRORHANDLER
		Dim configColl As NotesDocumentCollection
		
		'find all documents with this key
		Set configColl = configView.getAllDocumentsByKey( Ucase( key ), True )
		
		If configColl.count > 0  Then
			hasKey = True
		Else
			hasKey = False
		End If
		
DONE:
		Exit Function
ERRORHANDLER:
		Call Me.logAction( LOG_FATAL, parseParams( "Error in %4 : %1 %2 at line %3", Err, Error, Erl, Getthreadinfo( 1 )), Nothing )
		Resume DONE
	End Function 'hasKey
	
%REM
Checks the params - returns true if the database is found (and initialize var: db)
%END REM
	Public Function find( servers As Variant, path As String, replicaid As String ) As Boolean
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		On Error Goto ERRORHANDLER
		'resolve the path
		Dim filename As String
		path = Replace( path, "\", "/" )
		
		Select Case Left( path, 1 )
		Case "/" 'fixed - just use (skip first)
			filename = Mid( path, 2 )
		Case "." 'move one level up 
			'remove ../
			path = Strright( path, "/" )
			
			If Instr( applicationPath, "/" ) > 0 Then
				filename = Strleftback( applicationPath, "/" ) & path
			Else
				filename = path
			End If
		Case Else 'relative to current path
			filename = applicationPath & "/" & path
		End Select
		
		'check servers
		Dim servername As String
		Forall server In servers
			Select Case Ucase( server )
			Case "*":
				servername = getCurrentServer().abbreviated
				
			Case "[LOCAL]","": 
				servername = ""
				
			Case "[MAIL]":
				serverName = getMailServer().abbreviated
				
			Case "[HOME]":
				serverName = getHomeServer().abbreviated
				
			Case Else
				serverName = server
			End Select
			
			Set db = session.getDatabase( servername, filename )
			If db.IsOpen Then find=True : Exit Function 'found
		End Forall
		
		'not found
		Set db = Nothing
		find = False
DONE:
		Exit Function
ERRORHANDLER:
		Call Me.logAction( LOG_FATAL, parseParams( "Error in %4 : %1 %2 at line %3", Err, Error, Erl, Getthreadinfo( 1 )), Nothing )
		Resume DONE
	End Function
	
	Private Function logUsage( key As String )
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		On Error Goto ERRORHANDLER
		Dim sourceDb As NotesDatabase
		Set sourceDb = session.currentDatabase
		
		Dim usageDoc As NotesDocument
		key = Ucase( key )
		
		If usageView Is Nothing Then Exit Function
		
		Set usageDoc = usageView.GetDocumentByKey( key & "." & sourceDb.ReplicaID, True )
		If usageDoc Is Nothing Then
			Set usageDoc = configDb.CreateDocument()
			usageDoc.form = "Usage"
			
			Call usageDoc.ReplaceItemValue( "$PublicAccess", "1" )
			Call usageDoc.ReplaceItemValue( "$ConflictAction", "3" )
			Call usageDoc.ReplaceItemValue( "id", key )
			Call usageDoc.ReplaceItemValue( "hintServer", sourceDb.Server )
			Call usageDoc.ReplaceItemValue( "replicaid", sourceDb.ReplicaID )
			
			Call usageDoc.ReplaceItemValue( "path", sourceDb.FilePath )
			Call usageDoc.ReplaceItemValue( "title", sourceDb.Title )
			
			Call usageDoc.Save( True, False )
		End If
DONE:
		Exit Function
ERRORHANDLER:
		Call Me.logAction( LOG_FATAL, parseParams( "Error in %4 : %1 %2 at line %3", Err, Error, Erl, Getthreadinfo( 1 )), Nothing )
		Resume DONE
	End Function
	
%REM
		'returns true if the database is found
%END REM
	Private Function resolve( key As String ) As Boolean
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		On Error Goto ERRORHANDLER
		If key = "" Or key = "*" Then Set db = session.currentDatabase : Exit Function
		
		Set db = Nothing
		
		Call logUsage( key )
		
		Dim formula As String
		Dim lookupResult As Variant
		
'		'try local db (this db) first
		formula = {@dblookup( ""; @dbname ; "} & CONFIG_VIEW & {"; "} & UCase( key ) & {"; 2 )}
		lookupResult = Evaluate( formula )
		If Not IsArray( lookupResult ) then
			If configDb Is Nothing Then
				Call getConfigDatabase()
				Call initConfig()
			End If
			If Not isValid Then Exit function
			
			'find all documents with this key, in the dbConfig database
			formula = {@sort( @dblookup( ""; "} & configDb.server & {":"} & Replace( configDb.FilePath,"\","/" ) & {" ; "} & CONFIG_VIEW & {"; "} & UCase( key ) & {"; 2 ); [DESCENDING] )}
			lookupResult = Evaluate( formula )
			
			'find a matching reference
			If Not IsArray( lookupResult ) Then Exit Function 'not found - return nothing
		End if
		
		Dim entry As String
		
		
'Search for exceptions
'		Dim currentLocation As String
		Dim currentServer As String
'		currentLocation = location.getCurrentLocation()
		currentServer = Ucase( applicationServer.canonical )
		
'		Dim resultArray As New Array( lookupResult )
'		Dim keyArray As Variant
'		keyArray = resultArray.word( "#", 1 )
		
		Dim idx As Variant
		Dim v As Variant
		
		
		'search for exceptions
		If Ubound( lookupResult ) >= 1 Then
			'Priority: 1-Server, 2-Location, 3-User (based on the sorting of the lookupResult array)
			Dim fromType As String
			Dim fromData As Variant
			Dim toServer As String
			Dim toReplica As String
			Dim toType As String
			
			'Call Me.logAction( LOG_VERBOSE, parseParams( "Searching %1 exceptions ", Ubound( lookupResult )+1, "", "", "" ), Nothing  )
			
			Forall e In lookupResult
				Dim values As Variant
				fromType = StrToken( e, "#", 1 ) 
				fromData = Split( Cstr( Ucase( strtoken( e, "#",2 ))), "~",-1,5 )
				
				Select Case Lcase( fromType )
				Case "server":
					fromData = Arrayreplace( fromData, "[LOCAL]", "" )
					
					If Not Isnull( Arraygetindex( fromData, currentServer, 5 )) Then
						'server found
						'Call Me.logAction( LOG_VERBOSE, "Server found: " & e, Nothing )
						entry = e
						Goto FOUND
					End If
					
'				Case "location":
'					If Not Isnull( Arraygetindex( fromData, currentLocation, 5 )) Then
'						'location found
'						Call Me.logAction( LOG_VERBOSE, "Location found: " & e, Nothing )
'						entry = e
'						Goto FOUND
'					End If					
					
				Case "user":
					v = Evaluate( |@UserNamesList | )
					Forall u In fromData
						If Not Isnull( Arraygetindex( v, u, 5 )) Then
							'user found
							'Call Me.logAction( LOG_VERBOSE, "User found, as: " & u, Nothing )
							entry = e
							Goto FOUND
						End If
					End Forall
				End Select
			End Forall
		End If
		
'no exceptions found - use default database reference
		'default database is the last entry in lookupResult. 
		'syntax is: ##servers#path
		'servers: one or many, seperated with ~
		'Call Me.logAction( LOG_VERBOSE, parseParams( "DbConfig - default entry for %1: : ", key, lookupResult( 0 ), "", "" ), Nothing )
		entry = lookupResult( UBound( lookupResult ))
		
FOUND:
		v = Split( entry, "#" )
		
		If find( Split( v(2), "~" ), v(3), "") Then
			'OK
		End If
		
DONE:
		Exit Function
ERRORHANDLER:
		Call Me.logAction( LOG_FATAL, parseParams( "Error in %4 : %1 %2 at line %3", Err, Error, Erl, Getthreadinfo( 1 )), Nothing )
		Resume DONE
	End Function 'resolve
	
%REM
Returns the Notes database / or nothing if not found
%END REM
	Public Function getDatabase( key As String ) As NotesDatabase
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		On Error Goto ERRORHANDLER
		If Not isValid Then Set getDatabase = Nothing : Exit Function
		If key = "" Then Set getDatabase = db : Exit Function
		
		Call resolve( key )
		
		Set getDatabase = db 
		
DONE:
		Exit Function
ERRORHANDLER:
		Call Me.logAction( LOG_FATAL, parseParams( "Error in %4 : %1 %2 at line %3", Err, Error, Erl, Getthreadinfo( 1 )), Nothing )
		Resume DONE
	End Function 'getDatabase
	
	
	Public Function link() As String
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		On Error Goto ERRORHANDLER
		
		If db Is Nothing Then
			link = ""
		Else
			link = "notes://" & server.common & "/" & path()
		End If
		
DONE:
		Exit Function
ERRORHANDLER:
		Call Me.logAction( LOG_FATAL, parseParams( "Error in %4 : %1 %2 at line %3", Err, Error, Erl, Getthreadinfo( 1 )), Nothing )
		Resume DONE
	End Function 'link
	
	Public Function url() As String
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		On Error Goto ERRORHANDLER
		
		Dim v As Variant
		Dim script As String
		script = |
use "cls.utils"
Dim util As New Utils()
call CacheManager.pushValue( "host", util.getHttpHostname())
|
		If db Is Nothing Then
			url = ""
		Else
			v = Execute( script )
			url = "http://" & CacheManager.getValue("host") & "/" & path()
		End If
		
DONE:
		Exit Function
ERRORHANDLER:
		Call Me.logAction( LOG_FATAL, parseParams( "Error in %4 : %1 %2 at line %3", Err, Error, Erl, Getthreadinfo( 1 )), Nothing )
		Resume DONE
	End Function 'url
	
	
	Public Function database() As NotesDatabase
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Set database = db		
	End Function
	
End Class 

Public Class KeywordDocument As AbstractObject
'########################################################################################
	Private doc As NotesDocument
	
	Sub new( doc As NotesDocument ) 
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Set Me.doc = doc
	End Sub 'new
	
	Public Function document() As NotesDocument
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Set document = doc
	End Function 'document
	
	Public Function getValues() As Variant
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		getValues = doc.getItemValue( VALUE_ITEM )
	End Function 'getValues
	
	Public Function getKey() As String
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		getKey = doc.getItemValue( KEY_ITEM )( 0)
	End Function 'getKey
	
	Public Function refreshResponses()
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Dim coll As NotesDocumentCollection
		Dim respDoc As NotesDocument 'sub keyword
		Dim keyDoc As KeywordDocument
		
		Dim key As String
		
		Set coll = doc.responses
		If coll Is Nothing Then Exit Function
		Set respDoc = coll.getFirstDocument()
		Do Until respDoc Is Nothing
			'update fields
			key = getKey & "." & getValues()( 0 )
			If respDoc.getItemValue( KEY_ITEM )( 0 ) = key Then 
				'key hasn't changed - dont update this sub branch
			Else
				Call respDoc.replaceItemValue( KEY_ITEM, key )
				
				respDoc.lookupKey = Ucase( key )
				respDoc.title = "Keyword document: " & key
				respDoc.viewCategory = "KEYWORD." & key
				
				'save changes
				Call respDoc.save( True, False ) 
				
				'recursive: refresh all sub-subkeys
				Set keyDoc = New KeywordDocument( respDoc )
				Call keyDoc.refreshResponses()
			End If
			
			Set respDoc = coll.getNextDocument( respDoc )
		Loop
	End Function 'refreshResponses
	
	Function updateProfile() 
		Dim db As NotesDatabase 
		Set db = session.Currentdatabase 

		If hasProfile( db, "Setup" ) Then 
			Dim profile As NotesDocument 
			Set profile = db.getProfileDocument( "Setup" ) 
			
			
			Dim itemname As String 
			itemname = "KEY." & doc.getItemValue( "KEY" )( 0 ) 
			If cString( profile.Getitemvalue(Itemname)) <> cstring( doc.values ) Then 
				Call profile.Replaceitemvalue(itemname, doc.values) 
				Call profile.save( True,False ) 
			End If 
		End If 
		
	End Function 
End Class 