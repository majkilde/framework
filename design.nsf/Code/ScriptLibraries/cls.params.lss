'++LotusScript Development Environment:2:5:(Options):0:74
%REM
	Library cls.params
	Copyright 2010-2012 by Jakob Majkilde
	Description: Comments for Library
%END REM
Option Public
Option Declare
Use "cls.system"


%REM
	Rev 6.9.1 majkilde 15.03.2012
	- ParamManager.UpdateParams can now remove elements as well
	- ParamManager.getValues and search added
	Rev 6.9 majkilde 12.03.2012
	- ParamManager.hasParams added
	Rev 6.8 majkilde 06.03.2012
	- ParamManager.getCount added
	Rev 6.7 majkilde 24.08.2011
	- AbstractParams class created in cls.system
	Rev 6.6.2 majkilde 24.08.2011
	- Params.getList added
	- Params.add added (same as params.setParam)
	Rev 6.6.1 majkilde 23.08.2011
	- Params.count added
	Rev 1.0 majkilde 31.08.2010
%END REM

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Class ParamManager As AbstractObject
Declare Class Params As AbstractParams

'++LotusScript Development Environment:2:5:(Declarations):0:10

%REM
	Class ParamManager
	Description: manage multiple params stored in a RichText field (to avoid the 64k limit)
%END REM
Class ParamManager As AbstractObject
	
	Private data List As String
	
	%REM
		Sub New
		Description: Comments for Sub
	%END REM
	Sub New()	
		
	End Sub
	
	Function getAll() As Variant
		On Error goto eh
		Dim v As Variant
		Dim c As Integer
		ReDim v( 0 )
		
		ForAll entry In data
			ReDim Preserve v( c )
			v( c ) = ListTag( entry )
			c = c+1
		End ForAll
		getAll = v
done:
		Exit Function
eh:
		Error Err, getErrorinfo( Me )
	End Function
	
	%REM
		Search for specific values - returns all matching params
		e.g. search( "zip=4000;" ) will returns all records that match
	%END REM
	Function search( searchparams As String ) As Variant
		On Error GoTo eh
		Dim a As New Array ( Null )
		Dim q As Variant
		q = Split( searchparams, ";" )
		
		Dim match As Boolean
		ForAll entry In data
			match = True
			ForAll query In q
				If query <> "" Then
					If InStr( LCase( entry ), LCase( query )) = 0 Then
						match = False
						Exit ForAll
					End If
				End If
			End ForAll
			
			If match Then
				Call a.add( entry )
			End If
		End ForAll
		
		search = a.elements
done:
		Exit Function
eh:
		Error Err, getErrorinfo( Me )
	End Function
	
	%REM
		Function getValues
		Returns all the values for the specifed param name. 
		getValues( "id" ) does the same as getAll()
	%END REM
	Function getValues( param As String ) As Variant
		On Error GoTo eh
		Dim a As New Array( Null )
		Dim value As String
		ForAll entry In data
			value = StrLeft( StrRight( entry, param & "=" ), ";" )
			If Not a.hasElement(value) Then
				Call a.add( value )
			End If
		End ForAll
		getValues = a.elements
done:
		Exit Function
eh:
		Error Err, getErrorinfo( Me )
	End Function
	
	%REM 
                Function getCount 
                Description: Comments for Function 
	%END REM 
	Function getCount() As Long 
		On Error GoTo eh
		Dim i As Long 
		ForAll entry In data 
			If entry <> "" Then 
				i = i+1 
			End If 
		End ForAll 
		getCount = i 
done:
		Exit Function
eh:
		Error Err, getErrorinfo( Me )
	End Function
	
	%REM 
                Function hasParams 
                Description: Comments for Function 
	%END REM 
	Function hasParams( id As String ) As Boolean 
		On Error GoTo eh
		id = FullTrim( LCase( id )) 
		hasParams = IsElement( data( id )) 
done:
		Exit Function
eh:
		Error Err, getErrorinfo( Me )
	End Function
	
	%REM
		Function loadItem
		Description: Comments for Function
	%END REM
	Function loadItem( doc As notesDocument, itemname As String )
		On Error GoTo eh
		Dim item As Variant 'NotesRichTextItem
		Set item = doc.Getfirstitem(Itemname)
		
		Erase data
		Dim v As Variant
		
		'read the data
		If Not item Is Nothing Then
			If item.type = RICHTEXT then
				v = Split( item.GetUnformattedText(), Chr( 10 ))
			Else
				'multivalue text field
				v = item.values
			End If
		Else
			Exit function
		End If	
		
		'store in list
		Dim id As String
		ForAll entry In v
			id = Strleft( strright( entry, "id=" ), ";" )
			id = FullTrim( LCase( id ))
			If id <> "" Then
				data( id ) = entry
			End If
		End ForAll
done:
		Exit Function
eh:
		Error Err, getErrorinfo( Me )
	End Function
	
	%REM
		Function getParams
		Description: Comments for Function
	%END REM
	Function getParams( id As String ) As Params
		On Error goto eh
		id = FullTrim( LCase( id ))
		If iselement( data( id )) then
			Set getParams = New Params( data( id ))
		Else
			Set getParams = New Params( "id=" & id & ";" )
		End If
done:
		Exit Function
eh:
		Error Err, getErrorinfo( Me )
	End Function
	
	%REM
		Function updateParams
		Description: merge the new params into the dataset
		Set params to nothing to remove the entry
	%END REM
	Function updateParams( id As String, params As Params )
		On Error GoTo eh
		id = FullTrim( LCase( id ))
		
		If params Is Nothing Then
			If IsElement( data( id )) Then
				Erase data( id )
			End If
		Else
			Dim p1 As Params
			Set p1 = getParams( id )
			
			ForAll p In params.getAll()
				Call p1.setParam(CStr( p ), params.getParam( CStr( p )))
			End ForAll
			data( id ) = p1.toString()
		End If
done:
		Exit Function
eh:
		Error Err, getErrorinfo( Me )
	End Function
	
	%REM
		Function toString
		Description: Comments for Function
	%END REM
	Function toString() As String
		On Error GoTo eh
		Dim s As String
		ForAll entry In data
			s = s & entry & Chr( 10 )
		End ForAll
		toString = s
done:
		Exit Function
eh:
		Error Err, getErrorinfo( Me )
	End Function
	
	%REM
		Function saveItem
		Description: save data in a NotesRichTextItem
	%END REM
	Function saveItem( doc As NotesDocument, itemname As String )
		On Error GoTo eh
		Dim item As NotesRichTextItem
		Do While doc.Hasitem(Itemname)
			Call doc.Removeitem(itemname)
		loop
		Set item = doc.Createrichtextitem(itemname)
		ForAll entry In data
			Call item.Appendtext(entry)
			Call item.Addnewline(1, true)
		End ForAll
done:
		Exit Function
eh:
		Error Err, getErrorinfo( Me )
	End Function
End Class

%REM
	Class Common
	Backward compatiblity
%END REM
Class Params As AbstractParams
	Sub New( params As String )
		
	End Sub
End Class