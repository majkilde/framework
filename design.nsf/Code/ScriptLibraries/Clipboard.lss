'++LotusScript Development Environment:2:5:(Options):0:72
%REM
	Library Clipboard
	Created Apr 7, 2010 by Jakob Majkilde/NDK/GEAP
	Credits: http://www.lotusnotestutorial.com/lotus-notes-script-readingwriting-windows-clipboard.html
%END REM
Option Public
Option Declare


'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Public Class WindowsClipboard

'++LotusScript Development Environment:2:5:(Declarations):0:10
Declare Private Function GetClipboardData Lib "User32" (ByVal wFormat As Long) As Long
Declare Private Function SetClipboardData Lib "user32" (ByVal wFormat As Long, ByVal hData As Long) As Long
Declare Private Function OpenClipboard Lib "User32" Alias "OpenClipboard" (ByVal hwnd As Long) As Long
Declare Private Function CloseClipboard Lib "User32" Alias "CloseClipboard" () As Long
Declare Private Function GlobalLock Lib "kernel32" Alias "GlobalLock" (ByVal hMem As Long) As Long
Declare Private Function GlobalUnlock Lib "kernel32" Alias "GlobalUnlock" (ByVal hMem As Long) As Long
Declare Private Function GlobalAlloc Lib "kernel32" (ByVal wFlags As Long, ByVal dwBytes As Long) As Long
Declare Private Function GlobalFree Lib "kernel32" (ByVal hMem As Long) As Long
Declare Private Function EmptyClipboard Lib "user32" () As Long
Declare Private Function lstrcpyLP2Str Lib "kernel32" Alias "lstrcpyA" (ByVal lpString1 As String, _
ByVal lpString2 As Long) As Long
Declare Private Function lstrlenLP Lib "kernel32" Alias "lstrlenA" (ByVal lpString As Long) As Long
Declare Private Sub MoveMemory Lib "kernel32" Alias "RtlMoveMemory" (ByVal strDest As Any, _
ByVal lpSource As Any, ByVal Length As Any)
Declare Private Function GetFocus Lib "User32" Alias "GetFocus" () As Long

Private Const CF_TEXT = 1
Private Const GMEM_MOVABLE = &H2&
Private Const GMEM_DDESHARE = &H2000&

Public Class WindowsClipboard

	Public Property Get Contents As String
		Dim hClipboard As Long
		Dim LpStrl As Long
		Dim Resultl As Long
		Dim Clipboardstr As String

		If (OpenClipboard(0&) <> 0) Then
			hClipboard = GetClipboardData(CF_TEXT)
			If (hClipboard <> 0) Then
				LpStrl = GlobalLock(hClipboard)
				Clipboardstr = Space$(lstrlenLP(LpStrl))
				Resultl = lstrcpyLP2Str(Clipboardstr, LpStrl)
				GlobalUnlock(hClipboard)
			Else
				Clipboardstr = "" 'null
			End If
			Call CloseClipboard()
		Else
			Clipboardstr = ""
		End If
		Contents = Clipboardstr
	End Property   ' Ends the "Get" method For the "Contents" Property

	'The first thing the Class does Is Get a handle To the clipboard. Then the clipboard Is locked. A temporary blank area of data Is made so thereâ€™s a big enough block of String data To hold the results. The clipboard data Is Put into that blank area And the clipboard Is unlocked To free it up again. The results are returned To the user.

	'For setting the clipboard contents, this uses the same Contents Property, but this Time the Property Is Set instead of Get.
	Public Property Set Contents As String
		Dim lSize As Long
		Dim hMem As Long
		Dim pMemory As Long
		Dim temp As Variant

		lSize = Len(Contents)+1
		hMem = GlobalAlloc(GMEM_MOVABLE Or GMEM_DDESHARE, lSize)
		If hMem = 0 Or IsNull(hMem) Then Exit Property
		pMemory = GlobalLock(hMem)
		If pMemory = 0 Or IsNull(pMemory) Then
			GlobalFree(hMem)
			Exit Property
		End If
		Call MoveMemory(pMemory, Contents, lSize)
		Call GlobalUnlock(hMem)
		If (OpenClipboard(0&) <> 0) Then
			If (EmptyClipboard() <> 0) Then
				temp = SetClipboardData(CF_TEXT, hMem)
			End If
			temp = CloseClipboard()
		End If
		GlobalFree(hMem)
	End Property   ' Ends the "Set" method For the "Contents" Property
	
	Public function getText() As String
		getText = contents
	End function

	Public sub setText( s As String )
		contents = s
	End Sub
	
	Sub Delete
		CloseClipboard
	End sub
End Class

