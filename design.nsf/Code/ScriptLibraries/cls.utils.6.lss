'++LotusScript Development Environment:2:5:(Options):0:74
Option Declare
Use "cls.system"


%REM
**************************************************************************************************************************'
COPYRIGHT 2003-2009 by MAJKILDE Aps
**************************************************************************************************************************'
This library is programmed and owned by MAJKILDE Aps
Under the copyright laws, neither the documentation nor the software may be copied, photocopied, 
reproduced, translated, resold, or reduced to any electronic medium or machine-readable form, 
in whole or in part, without the prior written consent of MAJKILDE Aps, except in the manner described 
in the documentation or the applicable licensing agreement governing the use of the software.
**************************************************************************************************************************'
%ENDREM

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Public Class Strings As AbstractObject
Declare Public Class ArrayEx As Array
Declare Public Class Utils As AbstractObject
Declare Public Class ProcessBar As AbstractObject
Declare Public Class Timers As AbstractObject
Declare Public Function cArray( source As Variant ) As Array
Declare Public Function cStrings( source As Variant ) As Strings

'++LotusScript Development Environment:2:5:(Declarations):0:10
%REM
Set the version number in every script library
%END REM
'#STRINGS ###################################################################################

Private Const COMPARE_METHOD_DEFAULT = 0

'compMethod:
'	0	case sensitive, pitch sensitive
'	1	case insensitive, pitch sensitive
'	4	case sensitive, pitch insensitive
'	5	case insensitive, pitch insensitive


%REM
All numbers
%END REM
Public Const CHARS_09 = "0123456789"
%REM
All lowercase characters
%END REM
Public Const CHARS_AZ_LOWER = "abcdefghijklmnopqrstuvwxyz"
%REM
All uppercase characters
%END REM
Public Const CHARS_AZ_UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
%REM
All characters from A to Z
%END REM
Public Const CHARS_AZ = CHARS_AZ_LOWER + CHARS_AZ_UPPER'Strings'Utils







%REM
The String class represents character strings.
The class String includes methods for examining individual characters of the sequence, for comparing strings, for searching strings, for extracting substrings, and for creating a copy of a string with all characters translated to uppercase or to lowercase. 
%END REM

'####################################################################################
Public Class Strings As AbstractObject
'####################################################################################
	Private value As String 'the string
	compMethod As Long
	
%REM
Initializes a newly created String object so that it represents the same sequence of characters as the argument; in other words, the newly created string is a copy of the argument string.

Input
value - the source string
%END REM
	Sub new( value As Variant )
	'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
		setValue( value )
	End Sub 'new
	
%REM
Give the String object a new value

Input
value - the new string
%END REM
	Public Function setValue( value As Variant ) 
	'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
		Me.value = getString( value )
		compMethod = COMPARE_METHOD_DEFAULT
	End Function 'setValue
	
%REM
Returns the string
%END REM
	Public Function getValue() As String
		getValue = value
	End Function 'setValue
	
%REM
Encodes a string 2 XML (convert illegal chars, eg. convert < to &lt;)
%END REM
	Public Function xmlEncode( inputStr As String ) As String 
	'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
		On Error Goto ERRORHANDLER
		
		Dim tmpStr As String 
		Dim a As Long 
		For a = 1 To Len( inputStr ) 
			Select Case Mid( inputStr , a , 1 ) 
			Case |&| : tmpStr = tmpStr & |&amp;| 
			Case |<| : tmpStr = tmpStr & |&lt;| 
			Case |>| : tmpStr = tmpStr & |&gt;| 
			Case |"| : tmpStr = tmpStr & |&quot;| 
			Case |'| : tmpStr = tmpStr & |&apos;| 
			Case Else : tmpStr = tmpStr & Mid$( inputStr , a , 1 ) 
			End Select 
		Next 
		xmlEncode = tmpStr 
DONE:
		Exit Function
ERRORHANDLER:
		Call Me.logAction( LOG_FATAL, parseParams( "Error in %4 : %1 %2 at line %3", Err, Error, Erl, Getthreadinfo( 1 )), Nothing )
		Resume DONE
	End Function
	
%REM
Decodes xml to a string (e.g. convert from &amp; to & )
%END REM
	Public Function xmlDecode( inputStr As String ) As String 
	'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
		On Error Goto ERRORHANDLER
		inputStr = Replace( inputStr, |&amp;|, |&|, 5 )
		inputStr = Replace( inputStr, |&lt;|, |<|, 5 )
		inputStr = Replace( inputStr, |&gt;|, |>|, 5 )
		inputStr = Replace( inputStr, |&quot;|, |"|, 5 )
		inputStr = Replace( inputStr, |&apos;|, |'|, 5 )
		xmlDecode = inputStr
		
DONE:
		Exit Function
ERRORHANDLER:
		Call Me.logAction( LOG_FATAL, parseParams( "Error in %4 : %1 %2 at line %3", Err, Error, Erl, Getthreadinfo( 1 )), Nothing )
		Resume DONE
	End Function
	
%REM
URL decoding according to RFC1738
%END REM
	Public Function unescape() As String
	'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
		On Error Goto ERRORHANDLER
		Dim tmpStr As String
		Dim a As Long
		Dim charNo As Long
		
		For a = 1 To Len( Me.value )
			If Mid( Me.value , a , 1 ) = "%" Then
				charNo = Cint( "&H" & Mid( Me.value , a+1 , 2 ) )
				tmpStr = tmpStr & Chr( charNo )
				a = a + 2
			Else
				tmpStr = tmpStr & Mid( Me.value , a , 1 )
			End If
		Next
		
		unescape = tmpStr
		Me.value = tmpStr
DONE:
		Exit Function
ERRORHANDLER:
		Call Me.logAction( LOG_FATAL, parseParams( "Error in %4 : %1 %2 at line %3", Err, Error, Erl, Getthreadinfo( 1 )), Nothing )
		Resume DONE
	End Function
	
%REM
 URL encoding according to RFC1738
%END REM
	Public Function escape() As String
	'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
		On Error Goto ERRORHANDLER
		Dim tmpStr As String
		Dim a As Long
		For a = 1 To Len( Me.value )
			Select Case Mid( Me.value , a , 1 )
			Case "a" To "z", "A" To "Z", "0" To "9" : tmpStr = tmpStr & Mid$( Me.value , a , 1 )
			Case "$" , "-" , "_" , "." , "+", "!" , "*" , "'" , "(" , ")" , ",", "/", "?", "&", ":" : tmpStr = tmpStr & Mid$( Me.value , a , 1 )
			Case Else : tmpStr = tmpStr & "%" & Hex( Asc( Mid$( Me.value , a , 1 ) ) )
			End Select
		Next
		escape = tmpStr
		Me.value = tmpStr
DONE:
		Exit Function
ERRORHANDLER:
		Call Me.logAction( LOG_FATAL, parseParams( "Error in %4 : %1 %2 at line %3", Err, Error, Erl, Getthreadinfo( 1 )), Nothing )
		Resume DONE
	End Function
	
	
%REM
Returns the character at the specified index. An index ranges from 0 to length() - 1. The first character of the sequence is at index 0, the next at index 1, and so on, as for array indexing.

Parameters:
index - the index of the character.

Returns:
the character at the specified index of this string. The first character is at index 0.
%END REM
	Public Function charAt( idx As Long ) As String
	'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
		On Error Goto ERRORHANDLER
		charAt = Mid$( value, idx, 1 ) 
DONE:
		Exit Function
ERRORHANDLER:
		Call Me.logAction( LOG_FATAL, parseParams( "Error in %4 : %1 %2 at line %3", Err, Error, Erl, Getthreadinfo( 1 )), Nothing )
		Resume DONE
	End Function 'charAt
	
%REM
Converts a variant to a string

Input
v - source data: can be string, date, number or a Stings

Returns
source converted to a string
%END REM
	Public Function getString( source As Variant ) As String
	'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
		On Error Goto ERRORHANDLER
		Me.value = cString( source )
		
		getString = Me.value
DONE:
		Exit Function
ERRORHANDLER:
		Call Me.logAction( LOG_FATAL, parseParams( "Error in %4 : %1 %2 at line %3", Err, Error, Erl, Getthreadinfo( 1 )), Nothing )
		Resume DONE
	End Function 'getString
	
%REM
Compares two strings and returns the result.

Parameters:
anotherString - the string to be compared. Can be a Strings or a string, number, date

Returns
me is less than anotherString:	 	-1 
me equals anotherString: 	0 
me is greater than anotherString:	1 
%END REM
	Public Function compareTo( anotherString As Variant ) As Long
	'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
		On Error Goto ERRORHANDLER
		compareTo = Strcompare( value, getString( anotherString ), compMethod )
DONE:
		Exit Function
ERRORHANDLER:
		Call Me.logAction( LOG_FATAL, parseParams( "Error in %4 : %1 %2 at line %3", Err, Error, Erl, Getthreadinfo( 1 )), Nothing )
		Resume DONE
	End Function 'compareTo
	
	
%REM
Returns the length of this string.

Returns:
the length of the sequence of characters represented by this object.
%END REM
	Public Function length() As Long
	'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
		On Error Goto ERRORHANDLER
		length = Len( value )
DONE:
		Exit Function
ERRORHANDLER:
		Call Me.logAction( LOG_FATAL, parseParams( "Error in %4 : %1 %2 at line %3", Err, Error, Erl, Getthreadinfo( 1 )), Nothing )
		Resume DONE
	End Function 'length
	
%REM
Returns the data represented by this object as a string (same as getValue)
%END REM
	Public Function toString() As String
	'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
		toString = value
	End Function 'toString
	
%REM
Used to change the compare method (used when comparing 2 strings)

Input - compMethod
0 	Case Sensitive, Pitch sensitive [Default]
1 	Case Insensitive, Pitch sensitive
4 	Case Sensitive, Pitch insensitive
5 	Case Insensitive, Pitch insensitive
Use 2 to specify string comparison in the platform's collation sequence. If 2 is specified, strings are compared bit-wise. If you omit compMethod, the default comparison mode is the mode set by the Option Compare statement for this module. If there is no statement for the module, the default is case-sensitive and pitch-sensitive.
%END REM
	Public Function setCompMethod( compMethod As Long )
	'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
		Me.compMethod = compMethod
	End Function 'setCompMethod
	
	
%REM
Reverses a string (spelled backwards)
%ENDREM
	
	Private Function reverse( myString As String ) As String
	'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
		Dim i As Long
		Dim result As String
		
		For i = Len( myString ) To 1 Step -1
			result = result & Mid$( myString, i, 1 )
		Next
		reverse = result
	End Function 'reverse
	
	
%REM
Converts all of the characters in this String to lower case - except the first character in each word, these are converted to uppercase
%END REM
	Public Function toPropercase() As String
	'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
		value = Strconv( value, 3 ) 'SC_Propercase=3
		toPropercase = value
	End Function 'toPropercase
	
%REM
Removes white space from both ends of this string and removes duplicates from within the string
The trim method trims strings by eliminating any duplicate whitespaces (SPACE, TAB, NEWLINE) from the center of the string and all whitespace at the beginning and end of the strings..	

Returns
The trimmed string
%ENDREM
	
	Public Function trim() As String
	'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
		value = Fulltrim( value )
		Me.trim = value
	End Function 'trim
	
%REM
Converts all alphabetic characters in a string to uppercase, and returns the resulting string.
%END REM
	Public Function toUppercase() As String
	'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
		value = Ucase( value )
		toUppercase = value
	End Function 'toUppercase
	
%REM
Converts all alphabetic characters in a string to lowercase, and returns the resulting string.
%END REM
	Public Function toLowercase() As String
	'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
		value = Lcase( value )
		toLowercase = value
	End Function 'toLowercase
	
%REM
Returns true if the string object only contains valid characters, specified by the validChars parameter

Parameters:
validChars - String containing all valid characters

Example
dim s as new Strings( "Majkilde" )
if s.isValidChar( CHARS_AZ ) then
	print "OK"
else
	print "Error - string has illegal charecters"
end if
%END REM
	Public Function isValidChars( validChars As String ) As Long
	'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
		Dim idx As Long
		Dim char As String
		
		isValidChars = True
		For idx = 1 To length
			char = charAt( idx )
			If Instr( 1, validChars, char, compMethod ) = 0 Then
				isValidChars = False
				Exit Function
			End If
		Next
	End Function 'isValidChars
	
	
%REM
Converts a string to an array

Parameters:
delimiter - character or string

Returns
a string array.

Example
dim s as new Strings( "a,b,c" )
v = s.explode( "," )
print v(1) 'this will print 'b'

%END REM
	Public Function explode( delimiter As String ) As Variant
	'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------							
		explode = Split ( value, delimiter, -1 , compMethod )
	End Function 'explode
	
%REM
Returns the specified word from a text string. A "word" is defined as the part of a string that is delimited by the defined separator character. 
For example, if you specify a space (" ") as the separator, then a word is any series of characters preceded by and followed by a space (or by the quotation marks that indicate the beginning or end of the string).	

Parameters
separator - The character that you want used to delimit a word in the string.
number - A position indicating which word you want returned from string, starting from 1.

%END REM
	Public Function word( separator As String, number As Long ) As String
	'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
		Dim v As Variant
		Dim idx As Long
		idx = number-1
		v = Me.explode( separator )
		If Ubound( v ) >= idx And Lbound( v ) <= idx  Then
			word = v( idx )
		Else
			word = ""
		End If
	End Function 'word
	
	
%REM
Returns a new string resulting from replacing all occurrences of oldValue in this string with newValue

Returns
a string derived from this string by replacing every occurrence of oldValue with newValue
%END REM
	Public Function replace( oldValue As Variant, newValue As Variant ) As Strings
	'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------							
		value = Replace( value, oldValue, newValue )
		
		Set Me.replace = New Strings( value )	'return result
	End Function 'replace
	
	
%REM
extracts and returns the parameter value from the url query string
%END REM
	Public Function getUrlParameter( parameterName As String ) As String
	'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Dim s As String
		s = Strright( value, "&" & parameterName & "=", 5 )
		
		If Instr( s, "&" ) > 0 Then
			s = Strleft( s, "&" )
		End If
		
		getUrlParameter = s
	End Function
	
End Class 

Public Class ArrayEx As Array
'####### This class is used for backwar combatibility only
	
	Sub new( source As Variant )
	'--------------------------------------------------------------------------------------------------------------------------------------------------------------------	
			
	End Sub
	

	
	Public Function joinUnique( l As Variant ) As Variant 
	'--------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		If Isarray( l ) Then
			Forall entry In l
				Call addUnique( Cstr( entry ))
			End Forall
		Else
			Call addUnique( Cstr( l ))
		End If
		
		Me.joinUnique = elements()
	End Function
	
	
	
	Public Function addUnique( s As String ) As Variant
	'--------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		If s <> "" Then
			If Not hasElement( s ) Then add( s )
		End If
		
		Me.addUnique = elements()
	End Function
	

	
	Public Function removeElementAt( idx As Long ) As Variant
	'--------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		Dim i As Long
		If idx >= Lbound( values ) And idx <= Ubound( values ) Then
			For i = idx To cnt-1
				values( i ) = elementAt( i+1 )
			Next
			
			If cnt > 0 Then
				cnt = cnt-1
				If cnt = 0 Then
					Redim values( 0 )
				Else
					Redim Preserve values( cnt-1 )
				End If
			End If
		End If
		
		Me.removeElementAt = elements()
	End Function


	
	Public Function subset( start As Long, count As Long ) As Variant	
	'--------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		Dim result() As String
		Dim idx As Long
		Dim i As Long
		
		Dim startIdx As Long
		
		startIdx = start-1
		If startIdx < 0 Then startIdx = 0
		If startIdx > cnt-1 Then startIdx = cnt-1
		If startIdx + count > cnt Then count = cnt - startIdx
		
		Redim result( count-1 )
		For i = startIdx To startIdx+count-1
			result( idx ) = values( i )
			idx=idx+1
		Next
		
		subset = result
	End Function 'subset
	
%REM
Same as getElementAt
%END REM
	Public Function elementAt( idx As Long ) As String
	'--------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		elementAt = getElementAt( idx )
	End Function	
	
	
	Public Function bubbleSort() As Variant
	'--------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		'simple bubble sort
		Dim x As Long
		Dim y As Long
		Dim entry As String
		
		For x = Lbound( values ) To Ubound( values )
			For y = Lbound( values ) To Ubound( values )
				If x <> y Then
					If values( y ) > values( x ) Then
						entry = values( y ) 
						values( y ) = values( x )
						values( x ) = entry
					End If
				End If
			Next y
		Next x
		
		Me.bubbleSort = elements()
	End Function
	
%REM
textList: string or array
Returns true if only one match is found
%END REM
	Public Function hasMember( source As Variant ) As Boolean
	'--------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		Dim v As Variant
		v = cList( source )
		hasMember = False
		Forall entry In v
			If hasElement( Cstr( entry )) Then hasMember = True : Exit Function
		End Forall
	End Function
	

End Class



'# UTILS ###################################################################################
Public Class Utils As AbstractObject
'####################################################################################
	Private nab As NotesDatabase 'used by getServerDocument
	
%REM
Same as @isMember( "[role]", @userroles )

Parameters
role - the name of the role to check for

Returns
true: the user has the role
false: the user doesn't have the role

Example
dim util as new Util()
if util.hasRole( "[Admin]" ) then
    print "You have the Admin role"
end if
%END REM
	Public Function hasRole( role As String ) As Integer
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Dim v As Variant
		v = Evaluate( |@isMember( "| & role & |"; @userroles) | )
		hasRole =  ( v( 0 ) = 1 )
	End Function 'hasRole
	
	
%REM 
Return true is value is empty or field (NotesItem/NotesRichTextItem)
%END REM 
	Public Function isEmpty( value As Variant ) As Boolean 
        '--------------------------------------------------------------------------------------------------------------------------------------------------------------------       
		On Error Goto ERRORHANDLER
		Select Case Typename( value )
		Case "NOTESITEM"
			If value Is Nothing Then Me.isEmpty = True : Exit Function
			If value.valuelength = 0 Then Me.isEmpty = True : Exit Function
			Me.isEmpty = False
			Exit Function
			
		Case "NOTESRICHTEXTITEM"
			If value Is Nothing Then Me.isEmpty = True : Exit Function
			
			Me.isEmpty = False
			
			'search the richtext item for content
			Dim rtNav As NotesRichTextNavigator
			Set rtNav = value.CreateNavigator
			
			If ( rtNav.FindFirstElement ( RTELEM_TYPE_TABLE ) ) Then Exit Function
			If ( rtNav.FindFirstElement ( RTELEM_TYPE_TEXTRUN ) ) Then Exit Function
			If ( rtNav.FindFirstElement ( RTELEM_TYPE_TEXTPARAGRAPH ) ) Then Exit Function
			If ( rtNav.FindFirstElement ( RTELEM_TYPE_DOCLINK ) ) Then Exit Function
			If ( rtNav.FindFirstElement ( RTELEM_TYPE_SECTION ) ) Then Exit Function
			If ( rtNav.FindFirstElement ( RTELEM_TYPE_TABLECELL ) ) Then Exit Function
			If ( rtNav.FindFirstElement ( RTELEM_TYPE_FILEATTACHMENT ) ) Then Exit Function
			If ( rtNav.FindFirstElement ( RTELEM_TYPE_OLE ) ) Then Exit Function
			
			Me.isEmpty = True
			
		Case Else
			
			
			If Isscalar( value ) Then 
				Select Case Typename( value ) 
				Case "VARIANT" 
					If Isempty( value ) Then 
						Me.isEmpty = True 
						Exit Function 
					End If 
					
					If Isnull( value ) Then 
						Me.isEmpty = True 
						Exit Function 
					End If 
					
					If value = "" Then 
						Me.isEmpty = True 
					Else 
						Me.isEmpty = False 
					End If 
					Exit Function 
					
				Case "BOOLEAN" 
					Me.isEmpty = Not value 
					Exit Function 
					
				Case Else 
					If Cstr( value ) = "" Then 
						Me.isEmpty = True 
					Else 
						Me.isEmpty = False 
					End If 
					Exit Function 
					
				End Select 
				
			Else 'object, list or array 
				If Isarray( value ) Then 
					Forall entry In value
						If Not Me.isEmpty( entry ) Then Me.isEmpty = False : Exit Function
					End Forall
					Me.isEmpty = True
					Exit Function 
				End If 
				
				If Isobject( value ) Then 
					If value Is Nothing Then 
						Me.isEmpty = True 
					Else 
						Me.isEmpty = False 
					End If 
					Exit Function 
				End If 
				
				If Islist( value ) Then 
					Forall e In value 
						Me.isEmpty = False 
						Exit Function 
					End Forall 
					
					Me.isEmpty = True 
					Exit Function 
				End If 
			End If 
		End Select
		
DONE:
		Exit Function
ERRORHANDLER:
		Call Me.logAction( LOG_FATAL, parseParams( "Error in %4 : %1 %2 at line %3", Err, Error, Erl, Getthreadinfo( 1 )), Nothing )
		Resume DONE
	End Function 'isEmpty 
	
	
%REM
Compares to values. Returns true if they are exactly equal. 
Can compare both single values and arrays
%END REM
	Public Function isEqual( value1 As Variant, value2 As Variant ) As Integer
	'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		On Error Goto ERRORHANDLER
		Dim i As Integer
		
		isEqual = False
		
 	    'Check the datatype
		Select Case Typename( value1 )
		Case "NOTESITEM", "NOTESRICHTEXTITEM"
			If Typename( value1 ) <> Typename( value2 ) Then Exit Function
			If value1.type <> value2.type Then Exit Function
			If value1.isReaders <> value2.isReaders Then Exit Function
			If value1.isAuthors <> value2.isAuthors Then Exit Function
			If value1.isNames <> value2.isNames Then Exit Function
			
			If Me.Isempty( value1 ) And Me.Isempty( value2 ) Then isEqual = True : Exit Function
			
			If value1.valuelenght <> value2.valuelenght Then Exit Function
			If value1.text <> value2.text Then Exit Function
			
		Case Else
			
			If Isarray( value1 ) Then 'Array
				If Ubound( value1 ) <> Ubound( value2 ) Then Exit Function
				If Lbound( value1 ) <> Lbound( value2 ) Then Exit Function
				For i = Lbound( value1 ) To Ubound( value1 ) 
					If Datatype( value1( i )) <> Datatype( value2( i )) Then Exit Function
					'If Len( value1( i )) <> Len( value2( i )) Then Exit Function
					If value1( i ) <> value2( i ) Then Exit Function
				Next
			Else 'Scalar
				If Datatype( value1 ) <> Datatype( value2 ) Then Exit Function
				If value1 <> value2 Then Exit Function
			End If
		End Select
		
		isEqual = True
DONE:
		Exit Function
ERRORHANDLER:
		Call Me.logAction( LOG_FATAL, parseParams( "Error in %4 : %1 %2 at line %3", Err, Error, Erl, Getthreadinfo( 1 )), Nothing )
		Resume DONE
	End Function 'isEqual
	
%REM
Returns the server document for the specified server (use blank for current)
%END REM
	Private Function getServerDocument( servername As String ) As NotesDocument
	'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		On Error Goto ERRORHANDLER
		Dim session As New NotesSession
		Dim view As NotesView
		Dim server As notesname 
		If servername = "" Then
			Set server = New NotesName( session.CurrentDatabase.Server )
		Else
			Set server = New NotesName( servername )
		End If
		
		If server.common = "" Then
			Set getServerDocument = Nothing
		Else
			Set nab = New NotesDatabase( server.Abbreviated, "names.nsf" )
			If nab Is Nothing Then Error 9000, parseParams( "Can't open names.nsf on %1", server.Abbreviated, "", "", "" )
			Set view = nab.getView( "($Servers)" )
			If view Is Nothing Then error 9000, parseParams( "Can't open view ($Servers) in names.nsf on %1", server.Abbreviated, "", "", "" )
			
			Set getServerDocument = view.getDocumentByKey( server.canonical, True )
		End If
DONE:
		Exit Function
ERRORHANDLER:
		Call Me.logAction( LOG_FATAL, parseParams( "Error in %4 : %1 %2 at line %3", Err, Error, Erl, Getthreadinfo( 1 )), Nothing )
		Resume DONE
	End Function 'getServerDocument
	
%REM
Returns the host name for the current server - or the hostname found on the 'Setup' profile document if exits (in field named 'HTTP_HostName')	
%END REM
	Public Function getHTTPHostname() As String
	'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		On Error Goto ERRORHANDLER
		Dim session As New NotesSession
		Dim db As NotesDatabase
		Dim serverDoc As NotesDocument
		Dim profile As NotesDocument
		Dim hostname As String
		
		Set db = session.CurrentDatabase
		
		Dim server As New NotesName( db.Server )
		Set profile = db.GetProfileDocument( "Setup" )
		
		hostname = profile.GetItemValue( "HTTP_HostName" )( 0 )
		
		If hostname = "" Then
			If db.Server = "" Then
				hostname = "localhost"
			Else
				Set serverDoc = getServerDocument( server.Abbreviated )
				If Not serverDoc Is Nothing Then
					hostname = serverDoc.HTTP_HostName( 0 )
					If Len( hostname ) = 0 Then
						hostname = server.common
					End If
				End If
			End If
		End If
		getHTTPHostname = hostname
DONE:
		Exit Function
ERRORHANDLER:
		Call Me.logAction( LOG_FATAL, parseParams( "Error in %4 : %1 %2 at line %3", Err, Error, Erl, Getthreadinfo( 1 )), Nothing )
		Resume DONE
	End Function 'getHTTPHostname
	
	
	Function getNotesUrl( linkto As Variant ) As String
	'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Dim db As NotesDatabase
		Select Case Typename( linkto )
		Case "NOTESDATABASE"
			Set db = linkto
		Case Else
			Set db = linkto.parentDatabase
		End Select
		Dim n As New NotesName( db.Server )
		getNotesUrl = "notes://" &  n.Common & getUrlTo( linkto )
	End Function
	
	Public Function getUrlTo( LinkTo As Variant ) As String
	'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		On Error Goto ERRORHANDLER
		Dim session As New NotesSession
		Dim tmpUrl As String
		Dim dbRootDir As String
		
		Select Case Typename( linkTo )
		Case "NOTESDATABASE" :
			tmpUrl = linkTo.FilePath
			' Handle files opened thru the file system
			If Instr( tmpUrl,":" ) > 0 Then
				dbRootDir = session.GetEnvironmentString("Directory",True)
				tmpUrl = Mid( tmpUrl, Len(dbRootDir) + 2 )
			End If
			tmpUrl = "/" & Replace( Replace(  tmpUrl, "\", "/" ), " ", "+" )
		Case "NOTESVIEW" :
			If Isempty( linkTo.Aliases ) Then
				tmpUrl = getUrlTo( linkTo.parent ) & "/" & cStrings( linkTo.name ).escape()
			Else
				tmpUrl = getUrlTo( linkTo.parent ) & "/" & cStrings( linkTo.Aliases( Ubound( linkTo.Aliases ))).escape()
			End If
		Case "NOTESDOCUMENT" :
			If linkTo.parentView Is Nothing Then
				tmpUrl = getUrlTo( linkTo.parentDatabase ) & "/0/" & linkTo.UniversalId
			Else			
				tmpUrl = getUrlTo( linkTo.parentView ) & "/" & linkTo.UniversalId
			End If
		Case "NOTESFORM" :
			If Isempty( linkTo.Aliases ) Then
				tmpUrl = getUrlTo( linkTo.parent ) & "/" & cStrings( linkTo.name ).escape()
			Else
				tmpUrl = getUrlTo( linkTo.parent ) & "/" & cStrings( linkTo.Aliases( Ubound( linkTo.Aliases ))).escape()
			End If
		Case "NOTESAGENT" :
			tmpUrl = getUrlTo( linkTo.parent ) & "/" & cStrings( linkTo.name ).escape()
		End Select
		
		getUrlTo = Lcase$( tmpUrl )
DONE:
		Exit Function
ERRORHANDLER:
		Call Me.logAction( LOG_FATAL, parseParams( "Error in %4 : %1 %2 at line %3", Err, Error, Erl, Getthreadinfo( 1 )), Nothing )
		Resume DONE
	End Function 'getUrlTo
End Class 
%REM
	Class ProcessBar
	Description: Comments for Class
%END REM
Public Class ProcessBar As AbstractObject
	Private max As Long
	Private idx As Long
	Private inteval As Long '(1/100 of max)
	Private message As String
	
	%REM
		Max: number of iterations (max=100%)
		message: the string to print in the statusbar. Include a % to mark the position of the counter 
		sample: 
			dim bar as new ProcessBar( 1000, "Processing %" )
			for i = 1 to 1000
				bar.increment
			next i
	%END REM
	Sub New( max As Long, message As String )
		me.max = max
		me.idx = 0	
		me.inteval = max\100
		If me.inteval = 0 Then me.inteval = 1
		me.message = message
	End Sub
	
	%REM
		Function increment
		Description: Comments for Function
	%END REM
	Public Function increment()
		idx = idx+1
		If (idx Mod inteval) = 0 Then
			Dim s As String
			Dim r As Integer
			
			r = CInt(( idx / max ) * 100) 'percentage
			s = Replace( message, "%", r & "%" )
			
			Print s
		ElseIf idx = 1 Then 'first line
			Print Replace( message, "%", "0%" )
		End If
	End Function
End Class
%REM
	Class Timers
	Description: Comments for Class
%END REM
Public Class Timers As AbstractObject
	Private timerTick List As Long
	Private timerStatus List As String
	
	
	%REM
		Function hasTimer
		Description: Comments for Function
	%END REM
	Function hasTimer( timerid As String ) As Boolean
		hasTimer = IsElement( timerTick( LCase( timerid )))	
	End Function
	
	%REM
		Function startTimer
		Description: Comments for Function
	%END REM
	Public Function startTimer( timerid As String ) 
		Dim id As String
		id = LCase( timerid )
		
		If hasTimer( id ) Then
			Select Case timerStatus( id )
			Case "running" 'allready running -> restart
				timerTick( id ) = GetThreadInfo( 6 )
				
			Case "stopped" 'continue
				timerTick( id ) = GetThreadInfo( 6 )-timerTick( id )
				timerStatus( id ) = "running"
			End Select
		Else
			timerTick( id ) = GetThreadInfo( 6 )
			timerStatus( id ) = "running"
		End If
	End Function
	
	%REM
		Function resetTimer
		Description: Comments for Function
	%END REM
	Public Function clearTimer( timerid As String )
		If hasTimer( timerid ) Then
			Erase timerTick( LCase( timerid ))
			Erase timerStatus( LCase( timerid ))
		End If
	End Function
	
	%REM
		Function stopTimer
		Description: Comments for Function
	%END REM
	Public Function stopTimer( timerid As String ) As Long
		Dim id As String
		id = LCase( timerid )
		
		If hasTimer( id ) Then
			timerTick( id ) = getTimer( id )
			timerStatus( id ) = "stopped"
			stopTimer = timerTick( id )
		Else
			stopTimer = 0
		End If
	End Function
	
	%REM
		Function getTimer
		Description: Comments for Function
	%END REM
	Public Function getTimer( timerid As String ) As Long
		Dim id As String
		id = LCase( timerid )
		
		If hasTimer( id ) Then
			Select Case timerStatus( id )
			Case "running":
				getTimer = (GetThreadInfo( 6 ) - timerTick( id ))*1000 / GetThreadInfo( 7 )
			Case "stopped":
				getTimer = timerTick( id )*1000 / GetThreadInfo( 7 )
			End Select
		Else
			getTimer = 0
		End If
	End Function
	
	%REM
		Function timers
		Description: Comments for Function
	%END REM
	Public Function getTimers() As Variant
		Dim c As Integer
		Dim a As Variant
		ReDim a( 0 )
		
		ForAll entry In timerTick
			ReDim Preserve a( c )
			a( c ) = ListTag( entry )
			c = c+1
		End ForAll
		
		getTimers = a
	End Function
	
	%REM
		Function cString
		Converts ms to a mm:ss string (or m.mm seconds if below 1 minute)
	%END REM
	Public Function getTimerString( timerid As String ) As String
		Dim ms As Long
		ms = getTimer( timerid )
		
		Select Case ms
			Case Is < 1000: 'less than 1 second
				getTimerString = ms & " ms"
			Case Is < 60000: 'less then 1 minute
				getTimerString = Round( ms/1000, 2 ) & " seconds"
			Case Else
				getTimerString = ( ms \ 60000 ) & ":" & Right( "00" & (( ms Mod 60000 ) \ 1000 ),2) & " minutes"
		End Select
	End Function
End Class
'++LotusScript Development Environment:2:1:cArray:1:8
Public Function cArray( source As Variant ) As Array
	'---------------------------------------------------------------------------------------------------------------------------------------------------
	Set cArray = New Array( source )
End Function

'++LotusScript Development Environment:2:1:cStrings:4:8
%REM
Converts any none object source (string, array etc) to a Strings object
%END REM
Public Function cStrings( source As Variant ) As Strings
	'---------------------------------------------------------------------------------------------------------------------------------------------------
	Dim s As New Strings( source )
	Set cStrings = s
End Function












