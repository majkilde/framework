'++LotusScript Development Environment:2:5:(Options):0:74
%REM
	Library cls.Directory
	Created Dec 10, 2013 by Jakob Majkilde
	Description: Comments for Library
%END REM
Option Public
Option Declare
Use "cls.system"

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Class Directory As AbstractObject

'++LotusScript Development Environment:2:5:(Declarations):0:10

%REM
	Class Directory
	Description: Comments for Class
%END REM
Class Directory As AbstractObject
	Private nab As NotesDatabase
	
	%REM
	Sub New
	Description: Comments for Sub
	%END REM
	Sub New(directory As Variant)
		On Error GoTo eh
		Set nab = CacheManager.getDatabase(directory)
done:
		Exit Sub
eh:
		Error Err, getErrorInfo( Me )

	End Sub

	%REM
	Function getServer
	returns the name of the current server - or the homeserver if running on a local database
	%END REM
	Function getServerName() As String
		On Error GoTo eh
		'find a server (use the homeserver if script is running on a local database)
		Dim server As Variant
		server = Evaluate(|@if( @subset( @dbname;1 ) = ""; @LocationGetInfo([HomeServer]); @subset( @dbname;1 ))|)

		getServerName = server( 0 ) 
done:
		Exit Function
eh:
		Error Err, getErrorInfo( Me )

	End Function

	Private Function Get( entryname As String, view As String ) As NotesDocument
		On Error GoTo eh

		Set me.Get = CacheManager.getDocument(nab, view, entryname)

done:
		Exit Function
eh:
		Error Err, getErrorInfo( Me )

	End Function

	%REM
	Function getPerson
	Description: Comments for Function
	%END REM
	Function getPersonDocument( entryname As String ) As NotesDocument
		On Error GoTo eh

		Set getPersonDocument = me.get( entryname, "($Users)" )
		
done:
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function

	%REM
	Function getServer
	Description: Comments for Function
	%END REM
	Function getServerDocument( entryname As String ) As NotesDocument
		On Error GoTo eh

		Set getServerDocument = me.get( entryname, "($Servers)" )
		
done:
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function
	
	%REM
	Function getGroup
	Description: Comments for Function
	%END REM
	Function getGroupDocument( entryname As String ) As NotesDocument
		On Error GoTo eh
		
'		Set getGroupDocument = me.get( entryname, "($Groups)")
		Set getGroupDocument = me.get( entryname, "($VIMGroups)") 'This was originally used in the Resolve function
done:
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function


	%REM
		Function getEntry
		Description: Comments for Function
	%END REM
	Function getEntry( entryname As String ) As NotesDocument
		On Error GoTo eh

		Dim doc As NotesDocument
		
		If InStr( entryname, "/" ) Then
			Dim n As New NotesName( entryname )
			'server or users
			Set doc = getPersonDocument( n.abbreviated )
			If doc Is Nothing Then
				Set doc = getServerDocument( entryname )
			End If
		Else
			Set doc = getGroupDocument( n.abbreviated )
		End If
done:
		Exit Function
eh:
		Error Err, getErrorInfo( Me )

	End Function
	
	
	%REM
	Resolves a mixed list of groups and usernames - Explodes the groups and returns a list with all usernames
	%END REM
	Function resolveMembers( GroupOrNameList As Variant ) As Variant
		On Error GoTo eh
		Dim members As Variant
		Dim group As NotesDocument
		Dim person As NotesDocument
		Dim v As Variant

		Dim namelist As Variant
		namelist = cList( GroupOrNameList ) 'convert to array

		ForAll member In namelist
			'find the group in names.nsf
			Set group = getGroupDocument( CStr( member ))
			If Not group Is Nothing Then
				v = resolveMembers( group.members )
			Else
				Set person = getPersonDocument( CStr( member ))
				If person Is Nothing Then
					v = cList( member ) 'if not found - then just add
				Else
					v = cList( person.fullname( 0 ))
				End If
			End If

			If IsEmpty( members ) Then
				members = v
			Else
				members = ArrayAppend( members, v)
			End If
		End ForAll

		'return
		resolveMembers = ArrayUnique( members )

done:
		Exit Function
eh:
		Error Err, getErrorInfo( Me )
	End Function
	
End Class